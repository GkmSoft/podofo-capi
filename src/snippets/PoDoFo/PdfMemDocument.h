/***************************************************************************
 *   Copyright (C) 2006 by Dominik Seichter                                *
 *   domseichter@web.de                                                    *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of portions of this program with the      *
 *   OpenSSL library under certain conditions as described in each         *
 *   individual source file, and distribute linked combinations            *
 *   including the two.                                                    *
 *   You must obey the GNU General Public License in all respects          *
 *   for all of the code used other than OpenSSL.  If you modify           *
 *   file(s) with this exception, you may extend this exception to your    *
 *   version of the file(s), but you are not obligated to do so.  If you   *
 *   do not wish to do so, delete this exception statement from your       *
 *   version.  If you delete this exception statement from all source      *
 *   files in the program, then also delete it here.                       *
 ***************************************************************************/

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 *
 * Beautiful Capi project:
 * https://github.com/PetrPPetrov/beautiful-capi
 *
 * PoDoFo API description project:
 * https://github.com/GkmSoft/podofo-capi
 */


virtual ~PdfMemDocument() {}
virtual void Load( pszFilename,  bForUpdate) = 0;
virtual void Load( pBuffer,  lLen,  bForUpdate) = 0;
virtual void Load(PoDoFo::PdfRefCountedInputDevice rDevice,  bForUpdate) = 0;
virtual  IsLoaded() const = 0;
virtual void Write( pszFilename) = 0;
virtual void Write(PoDoFo::PdfOutputDevice* pDevice) = 0;
virtual void WriteUpdate( pszFilename) = 0;
virtual void WriteUpdate(PoDoFo::PdfOutputDevice* rDevice,  bTruncate) = 0;
virtual void AddPdfExtension( ns,  level) = 0;
virtual  HasPdfExtension( ns,  level) const = 0;
virtual void RemovePdfExtension( ns,  level) = 0;
virtual Bcapi::Vector<PoDoFo::PdfExtension> GetPdfExtensions() const = 0;
virtual void SetPassword( sPassword) = 0;
virtual void SetEncrypted( userPassword,  ownerPassword,  protection, PoDoFo::PdfEncrypt::EPdfEncryptAlgorithm eAlgorithm, PoDoFo::PdfEncrypt::EPdfKeyLength eKeyLength) = 0;
virtual void SetEncrypted(PoDoFo::PdfEncrypt eKeyLength) = 0;
virtual  GetEncrypted() const = 0;
virtual  IsLinearized() const = 0;
virtual PoDoFo::PdfVecObjects GetObjects() const = 0;
virtual PoDoFo::PdfVecObjects GetObjects() = 0;
virtual PoDoFo::PdfObject GetCatalog() = 0;
virtual PoDoFo::PdfObject* GetCatalog() const = 0;
virtual PoDoFo::PdfObject* GetTrailer() const = 0;
virtual PoDoFo::PdfObject* GetStructTreeRoot() const = 0;
virtual PoDoFo::PdfObject* GetMetadata() const = 0;
virtual PoDoFo::PdfObject* GetMarkInfo() const = 0;
virtual PoDoFo::PdfObject* GetLanguage() const = 0;
virtual PoDoFo::PdfObject* GetFont(PoDoFo::PdfObject* pObject) = 0;
virtual PoDoFo::PdfMemDocument* InsertPages(PoDoFo::PdfMemDocument rDoc,  inFirstPage,  inNumPages) = 0;
virtual void DeletePages( inFirstPage,  inNumPages) = 0;
virtual  IsPrintAllowed() const = 0;
virtual  IsEditAllowed() const = 0;
virtual  IsCopyAllowed() const = 0;
virtual  IsEditNotesAllowed() const = 0;
virtual  IsFillAndSignAllowed() const = 0;
virtual  IsAccessibilityAllowed() const = 0;
virtual  IsDocAssemblyAllowed() const = 0;
virtual  IsHighPrintAllowed() const = 0;
virtual void FreeObjectMemory(PoDoFo::PdfReference rRef,  bForce) = 0;
virtual void FreeObjectMemory(PoDoFo::PdfObject* pObj,  bForce) = 0;
virtual PoDoFo::PdfEncrypt* GetEncrypt() const = 0;
virtual PoDoFo::EPdfWriteMode GetWriteMode() const = 0;
virtual void SetWriteMode(PoDoFo::EPdfWriteMode write_mode) = 0;
virtual PoDoFo::EPdfVersion GetPdfVersion() const = 0;
virtual void SetPdfVersion(PoDoFo::EPdfVersion pdf_version) = 0;
