/***************************************************************************
 *   Copyright (C) 2006 by Dominik Seichter                                *
 *   domseichter@web.de                                                    *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License as       *
 *   published by the Free Software Foundation; either version 2 of the    *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of portions of this program with the      *
 *   OpenSSL library under certain conditions as described in each         *
 *   individual source file, and distribute linked combinations            *
 *   including the two.                                                    *
 *   You must obey the GNU General Public License in all respects          *
 *   for all of the code used other than OpenSSL.  If you modify           *
 *   file(s) with this exception, you may extend this exception to your    *
 *   version of the file(s), but you are not obligated to do so.  If you   *
 *   do not wish to do so, delete this exception statement from your       *
 *   version.  If you delete this exception statement from all source      *
 *   files in the program, then also delete it here.                       *
 ***************************************************************************/

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 *
 * Beautiful Capi project:
 * https://github.com/PetrPPetrov/beautiful-capi
 *
 * PoDoFo API description project:
 * https://github.com/GkmSoft/podofo-capi
 */

enum EPdfKeyLength
{
    EPdfKeyLength_40 = 40,
    EPdfKeyLength_56 = 56,
    EPdfKeyLength_80 = 80,
    EPdfKeyLength_96 = 96,
    EPdfKeyLength_128 = 128,
    EPdfKeyLength256 = 256
};
enum EPdfPermissions
{
    ePdfPermissions_Print = 0x00000004,
    ePdfPermissions_Edit = 0x00000008,
    ePdfPermissions_Copy = 0x00000010,
    ePdfPermissions_EditNotes = 0x00000020,
    ePdfPermissions_FillAndSign = 0x00000100,
    ePdfPermissions_Accesible = 0x00000200,
    ePdfPermissions_DocAssembly = 0x00000400,
    ePdfPermissions_HighPrint = 0x00000800
};
enum EPdfEncryptAlgorithm
{
    ePdfEncryptAlgorithm_RC4V1 = 1,
    ePdfEncryptAlgorithm_RC4V2 = 2,
    ePdfEncryptAlgorithm_AESV2 = 4,
    ePdfEncryptAlgorithm_AESV3 = 8
};

virtual ~PdfEncrypt() {}
virtual PoDoFo::PdfEncrypt* CreatePdfEncrypt( userPassword,  ownerPassword,  protection, PoDoFo::PdfEncrypt::EPdfEncryptAlgorithm eAlgorithm, PoDoFo::PdfEncrypt::EPdfKeyLength eKeyLength) = 0;
virtual PoDoFo::PdfEncrypt* CreatePdfEncrypt(PoDoFo::PdfObject* pObject) = 0;
virtual PoDoFo::PdfEncrypt* CreatePdfEncrypt(PoDoFo::PdfEncrypt rhs) = 0;
virtual  IsEncryptionEnabled(PoDoFo::PdfEncrypt::EPdfEncryptAlgorithm eAlgorithm) = 0;
virtual void GenerateEncryptionKey(PoDoFo::PdfString documentID) = 0;
virtual void CreateEncryptionDictionary(PoDoFo::PdfDictionary rDictionary) const = 0;
virtual PoDoFo::PdfOutputStream* CreateEncryptionOutputStream(PoDoFo::PdfOutputStream* pOutputStream) = 0;
virtual PoDoFo::PdfInputStream* CreateEncryptionInputStream(PoDoFo::PdfInputStream* pInputStream) = 0;
virtual  Authenticate( password, PoDoFo::PdfString documentID) = 0;
virtual PoDoFo::PdfEncrypt::EPdfEncryptAlgorithm GetEncryptAlgorithm() const = 0;
virtual  IsPrintAllowed() const = 0;
virtual  IsEditAllowed() const = 0;
virtual  IsCopyAllowed() const = 0;
virtual  IsEditNotesAllowed() const = 0;
virtual  IsFillAndSignAllowed() const = 0;
virtual  IsAccessibilityAllowed() const = 0;
virtual  IsDocAssemblyAllowed() const = 0;
virtual  IsHighPrintAllowed() const = 0;
virtual  GetUValue() const = 0;
virtual  GetOValue() const = 0;
virtual  GetEncryptionKey() const = 0;
virtual  GetPValue() const = 0;
virtual  GetRevision() const = 0;
virtual  GetKeyLength() const = 0;
virtual  IsMetadataEncrypted() const = 0;
virtual void Encrypt( inStr,  inLen,  outStr,  outLen) const = 0;
virtual void Decrypt( inStr,  inLen,  outStr, Bcapi::PdfLong outLen) const = 0;
virtual  CalculateStreamLength( length) const = 0;
virtual void SetCurrentReference(PoDoFo::PdfReference rRef) = 0;
virtual  GetEnabledEncryptionAlgorithms() const = 0;
virtual void SetEnabledEncryptionAlgorithms( enabled_encryption_algorithms) = 0;
