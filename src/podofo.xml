<?xml version= "1.0" ?>
<!--
 #
 # PoDoFo Capi provides C API for PoDoFo C++ library
 # Copyright (C) 2006 by Dominik Seichter
 # domseichter@web.de
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU Library General Public License as
 # published by the Free Software Foundation; either version 2 of the
 # License, or (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU Library General Public
 # License along with this program; if not, write to the
 # Free Software Foundation, Inc.,
 # 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 #
 # In addition, as a special exception, the copyright holders give
 # permission to link the code of portions of this program with the
 # OpenSSL library under certain conditions as described in each
 # individual source file, and distribute linked combinations
 # including the two.
 # You must obey the GNU General Public License in all respects
 # for all of the code used other than OpenSSL.  If you modify
 # file(s) with this exception, you may extend this exception to your
 # version of the file(s), but you are not obligated to do so.  If you
 # do not wish to do so, delete this exception statement from your
 # version.  If you delete this exception statement from all source
 # files in the program, then also delete it here.
 #
-->
<PoDoFo:api xmlns:PoDoFo= "http://gkmsoft.ru/beautifulcapi" project_name="PoDoFo" major_version="0" minor_version="9" patch_version="5">
  <namespace name="PoDoFo">
    <!-- base -->
    <class name="PdfVariant" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfVariant" implementation_class_header="PoDoFo/base/PdfVariant.h" >
      <constructor name="Default" />
      <constructor name="FromBool" >
        <argument name="b" type="bool"/>
      </constructor>
      <constructor name="FromPdf_int64" >
        <argument name="l" type="pdf_int64"/>
      </constructor>
      <constructor name="FromDouble" >
        <argument name="d" type="double"/>
      </constructor>
      <constructor name="FromPdfString" >
        <argument name="rsString" type="PoDoFo::PdfString"/>
      </constructor>
      <constructor name="FromPdfName" >
        <argument name="rName" type="PoDoFo::PdfName"/>
      </constructor>
      <constructor name="FromPdfReference" >
        <argument name="rRef" type="PoDoFo::PdfReference"/>
      </constructor>
      <constructor name="FromPdfArray" >
        <argument name="tList" type="PoDoFo::PdfArray"/>
      </constructor>
      <constructor name="FromPdfDictionary" >
        <argument name="rDict" type="PoDoFo::PdfDictionary"/>
      </constructor>
      <constructor name="FromPdfData" >
        <argument name="rData" type="PoDoFo::PdfData"/>
      </constructor>
      <constructor name="FromPdfVariant" >
        <argument name="rhs" type="PoDoFo::PdfVariant"/>
      </constructor>
      <method name="IsEmpty" const="true" return="bool"/>
      <method name="Clear"/>
      <method name="GetDataType" const="true" return="PoDoFo::EPdfDataType"/>
      <method name="GetDataTypeString" const="true" return="const char*"/>
      <method name="IsBool" const="true" return="bool"/>
      <method name="IsNumber" const="true" return="bool"/>
      <method name="IsReal" const="true" return="bool"/>
      <method name="IsString" const="true" return="bool"/>
      <method name="IsHexString" const="true" return="bool"/>
      <method name="IsName" const="true" return="bool"/>
      <method name="IsArray" const="true" return="bool"/>
      <method name="IsDictionary" const="true" return="bool"/>
      <method name="IsRawData" const="true" return="bool"/>
      <method name="IsNull" const="true" return="bool"/>
      <method name="IsReference" const="true" return="bool"/>
      <method name="Write" const="true">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="Write" const="true">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
        <argument name="keyStop" type="PoDoFo::PdfName"/>
      </method>
      <method name="ToString" const="true">
        <argument name="rsData" type="const char*"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
      </method>
      <property name="Bool" type="bool"/>
      <property name="Number" type="pdf_int64"/>
      <property name="Real" type="double"/>
      <method name="GetString" return="PoDoFo::PdfString" const="true"/>
      <method name="GetName" return="PoDoFo::PdfName" const="true"/>
      <method name="GetArray" return="PoDoFo::PdfArray" const="true"/>
      <method name="GetArray" return="PoDoFo::PdfArray" const="false"/>
      <method name="GetDictionary" return="PoDoFo::PdfDictionary" const="true"/>
      <method name="GetDictionary" return="PoDoFo::PdfDictionary" const="false"/>
      <method name="GetReference" return="PoDoFo::PdfReference" const="true"/>
      <method name="GetRawData" return="PoDoFo::PdfData" const="true"/>
      <method name="GetRawData" return="PoDoFo::PdfData"/>
      <method name="IsDirty" return="bool" const="true"/>
      <property name="Immutable" type="bool"/>
    </class>
    <class name="PdfDataType" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDataType" implementation_class_header="PoDoFo/base/PdfDataType.h">
      <method name="Write" const="false">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="IsDirty" const="true" return="bool"/>
      <method name="SetDirty" >
        <argument name="bDirty" type="bool"/>
      </method>
      <property name="Immutable" type="bool"/>
    </class>
    <class name="PdfObject" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfObject" implementation_class_header="PoDoFo/base/PdfObject.h" base="PoDoFo::PdfVariant">
      <constructor name="Default" />
      <constructor name="FromRefAndChar" >
        <argument name="rRef" type="PoDoFo::PdfReference" />
        <argument name="pszType" type="const char*"/>
      </constructor>
      <constructor name="FromRefAndVariant" >
        <argument name="rRef" type="PoDoFo::PdfReference"/>
        <argument name="rVariant" type="PoDoFo::PdfVariant"/>
      </constructor>
      <constructor name="FromVariant">
        <argument name="var" type="PoDoFo::PdfVariant"/>
      </constructor>
      <constructor name="FromBool" >
        <argument name="b" type="bool" />
      </constructor>
      <constructor name="FromPdf_int64" >
        <argument name="l" type="pdf_int64" />
      </constructor>
      <constructor name="FromDouble" >
        <argument name="d" type="double"/>
      </constructor>
      <constructor name="FromPdfString" >
        <argument name="rsString" type="PoDoFo::PdfString"/>
      </constructor>
      <constructor name="FromPdfName">
        <argument name="rName" type="PoDoFo::PdfName"/>
      </constructor>
      <constructor name="FromRef" >
        <argument name="rRef" type="PoDoFo::PdfReference"/>
      </constructor>
      <constructor name="FromPdfArray" >
        <argument name="tList" type="PoDoFo::PdfArray"/>
      </constructor>
      <constructor name="FromPdfDictionary" >
        <argument name="rDict" type="PoDoFo::PdfDictionary"/>
      </constructor>
      <constructor name="FromPdfObject">
        <argument name="rhs" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="GetIndirectKey" const="true" return="PoDoFo::PdfObject" >
        <argument name="key" type="PoDoFo::PdfName"/>
      </method>
      <method name="MustGetIndirectKey" const="true" return="PoDoFo::PdfObject">
        <argument name="key" type="PoDoFo::PdfName"/>
      </method>
      <method name="WriteObject" const="true" >
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice" />
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode" />
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt" />
        <argument name="keyStop" type="PoDoFo::PdfName"/>
      </method>
      <method name="GetObjectLength" const="true" return="pdf_long">
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
      </method>
      <method name="Reference" const="true" return ="PoDoFo::PdfReference" />
      <method name="GetStream" return="PoDoFo::PdfStream"/>
      <method name="GetStream" const="true" return="PoDoFo::PdfStream"/>
      <method name="HasStream" const="true" return="bool"/>
      <property name="Owner" type="PoDoFo::PdfVecObjects"/>
      <method name="FlateCompresssStream"/>
      <method name="GetByteOffset" return="pdf_long">
        <argument name="pszKey" type="const char*"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
      </method>
      <method name="DelayedStreamLoad" const="true"/>
    </class>
    <class name="PdfArray" implementation_class_name="PoDoFo::PdfArray" implementation_class_header="PoDoFo/base/PdfArray.h" base="PoDoFo::PdfArrayBaseClass">
      <constructor name="Default" />
      <constructor name="FromPdfObject" >
        <argument name="var" type="PoDoFo::PdfObject"/>
      </constructor>
      <constructor name="FromPdfArray" >
        <argument name="rhs" type="PoDoFo::PdfArray"/>
      </constructor>
      <method name="GetSize" const="true" return="size_t"/>
      <method name="Cleat"/>
      <method name="Write" const="true">
        <argument name="pDevice" type="PdfOutputDevice*" />
        <argument name="eWriteMode" type="EPdfWriteMode"/>
        <argument name="pEncrypt" type="const PdfEncrypt*"/>
      </method>
      <method name="ContainsString" const="true" return="bool">
        <argument name="cmpString" type="const char*"/>
      </method>
      <method name="GetStringIndex" const="true" return="size_t">
        <argument name="cmpString" type="const char*"/>
      </method>
      <method name="push_back" >
        <argument name="var" type="PoDoFo::PdfObject"/>
      </method>
      <method name="size" const="true" return="size_t"/>
      <method name="empty" const="true" return="bool"/>
      <method name="resize" >
        <argument name="n" type="size_t"/>
        <argument name="x" type="value_type"/>
      </method>
      <method name="begin" return="PdfArrayIterator"/>
      <method name="begin" const="true" return="PoDoFo::PdfArrayConstIterator"/>
      <method name="end" return="PoDoFo::PdfArrayIterator"/>
      <method name="end" const="true" return="PoDoFo::PdfArrayConstIterator"/>
      <method name="rbegin" return="PoDoFo::PdfArrayReverseIterator"/>
      <method name="rbegin" const="true" return="PoDoFo::PdfArrayConstReverseIterator"/>
      <method name="rend" return="PoDoFo::PdfArrayReverseIterator"/>
      <method name="rend" const="true" return="PoDoFo::PdfArrayConstReverseIterator"/>
      <method name="insert" >
        <argument name="position" type="PoDoFo::PdfArrayIterator"/>
        <argument name="first" type="PoDoFo::PdfArrayIterator"/>
        <argument name="last" type="PoDoFo::PdfArrayIterator"/>
      </method>
      <method name="insert" return="PoDoFo::PdfArrayIterator">
        <argument name="position" type="PoDoFo::PdfArrayIterator"/>
        <argument name="val" type="PoDoFo::PdfObject"/>
      </method>
      <method name="erase">
        <argument name="pos" type="PoDoFo::PdfArrayIterator"/>
      </method>
      <method name="erase">
        <argument name="first" type="PoDoFo::PdfArrayIterator"/>
        <argument name="last" type="PoDoFo::PdfArrayIterator"/>
      </method>
      <method name="reserve" >
        <argument name="n" type="n"/>
      </method>
      <!--
            <method name="front" return="PoDoFo::PdfObject"/>
            <method name="front" const="true" return="PoDoFo::PdfObject"/>
            <method name="back" return="PoDoFo::PdfObject"/>
            <method name="back" const="true" return="PoDoFo::PdfObject"/>
            -->
      <method name="IsDirty" const="true" return="bool"/>
      <method name="SetDirty" return="bool">
        <argument name="bDirty" type="bool"/>
      </method>


    </class>
    <class name="PdfArrayIterator" lifecycle="copy_semantic" implementation_class_name="PdfArray::iterator" implementation_class_header="PoDoFo/base/PdfArray.h">

    </class>
    <class name="PdfArrayConstIterator" lifecycle="copy_semantic" implementation_class_name="PdfArray::const_iterator" implementation_class_header="PoDoFo/base/PdfArray.h">

    </class>
    <class name="PdfArrayReverseIterator" lifecycle="copy_semantic" implementation_class_name="PdfArray::reverse_iterator" implementation_class_header="PoDoFo/base/PdfArray.h">

    </class>
    <class name="PdfArrayConstReverseIterator" lifecycle="copy_semantic" implementation_class_name="PdfArray::const_reverse_iterator" implementation_class_header="PoDoFo/base/PdfArray.h">

    </class>
    <class name="PdfCanvas" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfCanvas" implementation_class_header="PoDoFo/base/PdfCanvas.h">
      <method name="GetContents" const="true" return="PoDoFo::PdfObject" />
      <method name="GetContentsForAppending" const="true" return="PoDoFo::PdfObject" />
      <method name="GetResources" const="true" return="PoDoFo::PdfObject" />
      <method name="GetPageSize" const="true" return="PoDoFo::PdfRect" />
      <method name="GetProcSet" const="true" return="PoDoFo::PdfArray" />

      <method name="AddColorResource" const="true" >
        <argument name="rColor" type="PoDoFo::PdfColor"/>
      </method>
      <method name="AddResource" const="true" >
        <argument name="rIdentifier" type="PoDoFo::PdfName"/>
        <argument name="rRef" type="PoDoFo::PdfReference"/>
        <argument name="rName" type="PoDoFo::PdfName"/>
      </method>
    </class>
    <class name="PdfColor" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColor" implementation_class_header="PoDoFo/base/PdfColor.h">
      <constructor name="Default"/>
      <constructor name="FromGrayScale" >
        <argument name="dGray" type="double"/>
      </constructor>
      <constructor name="FromRGB" >
        <argument name="dRed" type="double"/>
        <argument name="dGreen" type="double"/>
        <argument name="dBlue" type="double"/>
      </constructor>
      <constructor name="FromCMYK" >
        <argument name="dCyan" type="double"/>
        <argument name="dMagenta" type="double"/>
        <argument name="dYellow" type="double"/>
        <argument name="dBlack" type="double"/>
      </constructor>
      <constructor name="FromPdfColor" >
        <argument name="rhs" type="PoDoFo::PdfColor"/>
      </constructor>
      <method name="IsGrayScale" const="true" return="bool"/>
      <method name="IsRGB" const="true" return="bool"/>
      <method name="IsCMYK" const="true" return="bool"/>
      <method name="IsSeparation" const="true" return="bool"/>
      <method name="IsCieLab" const="true" return="bool"/>
      <method name="GetColorSpace" const="true" return="PoDoFo::EPdfColorSpace"/>
      <method name="GetAlternateColorSpace" const="true" return="PoDoFo::EPdfColorSpace"/>
      <method name="GetGrayScale" const="true" return="double"/>
      <method name="GetRed" const="true" return="double"/>
      <method name="GetGreen" const="true" return="double"/>
      <method name="GetBlue" const="true" return="double"/>
      <method name="GetCyan" const="true" return="double"/>
      <method name="GetMagenta" const="true" return="double"/>
      <method name="GetYellow" const="true" return="double"/>
      <method name="GetBlack" const="true" return="double"/>
      <method name="GetName" const="true" return="const char*"/>
      <method name="GetDensity" const="true" return="double"/>
      <method name="GetCieL" const="true" return="double"/>
      <method name="GetCieA" const="true" return="double"/>
      <method name="GetCieB" const="true" return="double"/>
      <method name="ConvertToGrayScale" const="true" return="PoDoFo::PdfColor"/>
      <method name="ConvertToRGB" const="true" return="PoDoFo::PdfColor"/>
      <method name="ConvertToCMYK" const="true" return="PoDoFo::PdfColor"/>
      <method name="ToArray" const="true" return="PoDoFo::PdfArray"/>
      <method name="FromString" return="PoDoFo::PdfColor">
        <argument name="pszName" type="const char*"/>
      </method>
      <method name="FromArray" return="PoDoFo::PdfColor">
        <argument name="rArray" type="PoDoFo::PdfArray"/>
      </method>
      <method name="GetColorSpaceForName" return="PoDoFo::EPdfColorSpace">
        <argument name="rName" type="PoDoFo::PdfName"/>
      </method>
      <method name="GetNameForColorSpace" return="PoDoFo::PdfName">
        <argument name="eColorSpace" type="PoDoFo::EPdfColorSpace"/>
      </method>
      <method name="BuildColorSpace" return="PoDoFo::PdfObject">
        <argument name="pOwner" type="PoDoFo::PdfVecObjects"/>
      </method>
    </class>
    <class name="PdfColorGray" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColorGray" implementation_class_header="PoDoFo/base/PdfColor.h" base="PoDoFo::PdfColor">
      <constructor name="FromGrayscale" >
        <!-- explicit constructor -->
        <argument name="dGray" type="double"/>
      </constructor>
    </class>
    <class name="PdfColorRGB" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColorRGB" implementation_class_header="PoDoFo/base/PdfColor.h" base="PoDoFo::PdfColor">
      <constructor name="FromColors" >
        <argument name="dRed" type="double"/>
        <argument name="dGreen" type="double"/>
        <argument name="dBlue" type="double"/>
      </constructor>
    </class>
    <class name="PdfColorCMYK" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColorRGB" implementation_class_header="PoDoFo/base/PdfColor.h" base="PoDoFo::PdfColor">
      <constructor name="FromColors" >
        <argument name="dCyan" type="double"/>
        <argument name="dMagenta" type="double"/>
        <argument name="dYellow" type="double"/>
        <argument name="dBlack" type="double"/>
      </constructor>
    </class>
    <class name="PdfColorSeparationAll" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColorSeparationAll" implementation_class_header="PoDoFo/base/PdfColor.h" base="PoDoFo::PdfColor">
      <constructor name="Default" />
    </class>
    <class name="PdfColorSeparationNone" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColorSeparationNone" implementation_class_header="PoDoFo/base/PdfColor.h" base="PoDoFo::PdfColor">
      <constructor name="Default" />
    </class>
    <class name="PdfColorSeparation" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColorSeparation" implementation_class_header="PoDoFo/base/PdfColor.h" base="PoDoFo::PdfColor">
      <constructor name="Default" >
        <argument name="sName" type="const char*"/>
        <argument name="dDensity" type="double"/>
        <argument name="alternateColor" type="PoDoFo::PdfColor"/>
      </constructor>
    </class>
    <class name="PdfColorCieLab" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfColorCieLab" implementation_class_header="PoDoFo/base/PdfColor.h" base="PoDoFo::PdfColor">
      <constructor name="FromColors" >
        <argument name="dCieL" type="double"/>
        <argument name="dCieA" type="double"/>
        <argument name="dCieB" type="double"/>
      </constructor>
    </class>
    <enumeration name="EPdfContentsType" underlying_type="unsigned char">
      <item name="ePdfContentsType_Keyword" value="0"/>
      <item name="ePdfContentsType_Variant" value="1"/>
      <item name="ePdfContentsType_ImageData" value="2"/>
    </enumeration>
    <class name="PdfContentsTokenizer" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfContentsTokenizer" implementation_class_header="PoDoFo/base/PdfContentsTokenizer.h" base="PoDoFo::PdfTokenizer">
      <constructor name="FromBuffer" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="long"/>
      </constructor>
      <constructor name="FromCanvas" >
        <argument name="pCanvas" type="PoDoFo::PdfCanvas"/>
      </constructor>
      <method name="ReadNext" return="bool">
        <argument name="reType" type="PoDoFo::EPdfContentsType"/>
        <argument name="rpszKeyword" type="const char*&amp;"/>
        <argument name="rVariant" type="PoDoFo::PdfVariant"/>
      </method>
      <method name="GetNextToken" return="bool">
        <argument name="pszToken" type="const char*&amp;"/>
        <argument name="peType" type="PoDoFo::EPdfContentsType"/>
      </method>

    </class>
    <class name="PdfData" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfData" implementation_class_header="PoDoFo/base/PdfData.h" base="PoDoFo::PdfDataType">
      <constructor name="NewPdfData" >
        <argument name="pszData" type="const char*"/>
      </constructor>
      <constructor name="FromBuffer" >
        <argument name="pszData" type="const char*"/>
        <argument name="dataSize" type="size_t"/>
      </constructor>
      <constructor name="FromOther" >
        <argument name="rhs" type="PoDoFo::PdfData"/>
      </constructor>
      <method name="Write" const="true" >
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="data" const="true" return="const char*"/>
    </class>
    <class name="PdfDate" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDate" implementation_class_header="PoDoFo/base/PdfDate.h">
      <constructor name="Default"/>
      <constructor name="FromTime_t">
        <argument name="t" type="time_t"/>
      </constructor>
      <constructor name="FromPdfString">
        <argument name="sDate" type="PoDoFo::PdfString"/>
      </constructor>
      <method name="IsValid" const="true" return="bool"/>
      <method name="GetTime" const="true" return="const time_t&amp;"/>
      <method name="ToString" const="true" >
        <argument name="rsString" type="PoDoFo::ToString"/>
      </method>

    </class>
    <class name="PdfDictionary" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDictionary" implementation_class_header="PoDoFo/base/PdfDictionary" base="PoDoFo::PdfDataType">
      <constructor name="Default"/>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfDictionary"/>
      </constructor>
      <method name="Clear" />
      <method name="AddKey" >
        <argument name="identifier" type="PoDoFo::PdfName"/>
        <argument name="rObject" type="PoDoFo::PdfObject"/>
      </method>
      <method name="GetKey" const="true" return="PoDoFo::PdfObject">
        <argument name="key" type="PoDoFo::PdfName"/>
      </method>
      <method name="GetAsLong" return="pdf_int64" const="true">
        <argument name="key" type="PoDoFo::PdfName"/>
        <argument name="lDefault" type="pdf_int64"/>
      </method>
      <method name="GetKeyAsReal" return="pdf_int64" const="true">
        <argument name="key" type="PoDoFo::PdfName"/>
        <argument name="dDefault" type="double"/>
      </method>
      <method name="GetKeyAsBool" return="bool" const="true">
        <argument name="key" type="PoDoFo::PdfName"/>
        <argument name="bDefault" type="bool"/>
      </method>
      <method name="GetKeyAsName" return="PdfName" const="true">
        <argument name="key" type="PoDoFo::PdfName"/>
      </method>
      <method name="HasKey" const="true" return="PoDoFo::PdfName">
        <argument name="key" type="PoDoFo::PdfName"/>
      </method>
      <method name="RemoveKey" const="true" return="bool">
        <argument name="identifier" type="PoDoFo::PdfName"/>
      </method>
      <method name="Write" const="true">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="Write" const="true">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
        <argument name="keyStop" type="PoDoFo::PdfName"/>
      </method>
      <method name="GetKeys" return="PoDoFo::TKeyMap" const="true"/>
      <method name="IsDirty" return="bool" const="true"/>
      <method name="SetDirty" >
        <argument name="bDirty" type="bool"/>
      </method>
    </class>
    <class name="PdfEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h">
    </class>
    <class name="PdfSimpleEncoding" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfSimpleEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfEncoding">
      <constructor name="FromName">
        <argument name="rName" type="PoDoFo::PdfName"/>
      </constructor>
      <method name="AddToDictionary" const="true" >
        <argument name="rDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="ConvertToUnicode" const="true" return="PoDoFo::PdfString" >
        <argument name="eEncodedString" type="PoDoFo::PdfString" />
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="ConvertToEncoding" const="true" return="PoDoFo::PdfString">
        <argument name="rString" type="PoDoFo::PdfString"/>
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="IsAutoDelete" const="true" return="bool"/>
      <method name="IsSingleByteEncoding" return="bool" const="true"/>
      <method name="GetName" const="true" return="PoDoFo::PdfName" />
      <method name="GetCharCode" return="pdf_utf16be" const="true"/>
    </class>
    <class name="PdfDocEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDocEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h"  base="PoDoFo::PdfSimpleEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfWinAnsiEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfWinAnsiEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfSimpleEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfMacRomanEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfMacRomanEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfSimpleEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfMacExpertEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfMacExpertEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfSimpleEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfStandardEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfStandardEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfSimpleEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfSymbolEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfSymbolEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfSimpleEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfZapfDingbatsEncoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfZapfDingbatsEncoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfSimpleEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfWin1250Encoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfWin1250Encoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfWinAnsiEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfIso88592Encoding" abstract="true" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfIso88592Encoding" implementation_class_header="PoDoFo/base/PdfEncoding.h" base="PoDoFo::PdfWinAnsiEncoding">
      <constructor name="Default" />
    </class>
    <class name="PdfEncodingFactory" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncodingFactory" implementation_class_header="PoDoFo/basePdfEncodingFactory.h">
      <method name="GlobalPdfDocEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalWinAnsiEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalMacRomanEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalStandardEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalMacExpertEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalSymbolEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalZapfDingbatsEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalIdentityEncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalWin1250EncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="GlobalIso88592EncodingInstance" return="PoDoFo::PdfEncoding"/>
      <method name="FreeGlobalEncodingInstances"/>
      <method name="PoDoFoClientAttached"/>
    </class>
    <class name="PdfEncrypt" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncrypt" implementation_class_header="PoDoFo/base/PdfEncrypt.h">
      <enumeration name="EPdfKeyLength" underlying_type="unsigned char">
        <item name="EPdfKeyLength_40" value="40"/>
        <item name="EPdfKeyLength_56" value="56"/>
        <item name="EPdfKeyLength_80" value="80"/>
        <item name="EPdfKeyLength_96" value="96"/>
        <item name="EPdfKeyLength_128" value="128"/>
        <item name="EPdfKeyLength256" value="256"/>
      </enumeration>
      <enumeration name="EPdfPermissions" underlying_type="int" >
        <item name="ePdfPermissions_Print" value="0x00000004"/>
        <item name="ePdfPermissions_Edit" value="0x00000008"/>
        <item name="ePdfPermissions_Copy" value="0x00000010"/>
        <item name="ePdfPermissions_EditNotes" value="0x00000020"/>
        <item name="ePdfPermissions_FillAndSign" value="0x00000100"/>
        <item name="ePdfPermissions_Accesible" value="0x00000200"/>
        <item name="ePdfPermissions_DocAssembly" value="0x00000400" />
        <item name="ePdfPermissions_HighPrint" value="0x00000800"/>
      </enumeration>
      <enumeration name="EPdfEncryptAlgorithm" underlying_type="unsigned char">
        <item name="ePdfEncryptAlgorithm_RC4V1" value="1"/>
        <item name="ePdfEncryptAlgorithm_RC4V2" value="2"/>
        <item name="ePdfEncryptAlgorithm_AESV2" value="4"/>
        <item name="ePdfEncryptAlgorithm_AESV3" value="8"/>
      </enumeration>
      <method name="CreatePdfEncrypt" return="PoDoFo::PdfEncrypt">
        <!-- Name duplicate -->
        <argument name="userPassword" type="const char*"/>
        <argument name="ownerPassword" type="const char*"/>
        <argument name="protection" type="int"/>
        <argument name="eAlgorithm" type="PoDoFo::PdfEncrypt::EPdfEncryptAlgotithm"/>
        <argument name="eKeyLength" type="PoDoFo::PdfEncrypt::EPdfKeyLength"/>
      </method>
      <method name="CreatePdfEncrypt" return="PoDoFo::PdfEncrypt">
        <!-- Name duplicate -->
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </method>
      <method name="CreatePdfEncrypt" return="PoDoFo::PdfEncrypt">
        <!-- Name duplicate -->
        <argument name="rhs" type="PoDoFo::PdfEncrypt"/>
      </method>
      <property name="EnabledEncryptionAlgorthms" type="int"/>
      <method name="IdEncryptionEnabled" return="bool" >
        <argument name="eAlgorithm" type="PoDoFo::EPdfEncryptAlgotithm"/>
      </method>
      <method name="GenerateEncryptionKey" >
        <argument name="documentID" type="PdfString"/>
      </method>
      <method name="CreateEcryptionDictionary" const="true">
        <argument name="rDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="CreateEncryptionOutputStream" return="PoDoFo::PdfOutputStream" >
        <argument name="pOutputStream" type="PoDoFo::PdfOutputStream"/>
      </method>
      <method name="CreateEncryptionInputStream" return="PoDoFo::PdfInputStream" >
        <argument name="pInputStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <method name="Authenticate" return="bool" >
        <argument name="password" type="const char*" />
        <argument name="documentID" type="PoDoFo::PdfString"/>
      </method>
      <method name="GetEncryptAlgorithm" return="PoDoFo::EPdfEncryptAlgorithm" const="true"/>
      <method name="IsPrintAllowed" const="true" return="bool"/>
      <method name="IsEditAllowed" const="true" return="bool"/>
      <method name="IsCopyAllowed" const="true" return="bool"/>
      <method name="IsEditNotesAllowed" const="true" return="bool"/>
      <method name="IsFillAndSignAllowed" const="true" return="bool"/>
      <method name="IsAccesibilityAllowed" const="true" return="bool"/>
      <method name="IsDocumentAssemblyAllowed" const="true" return="bool"/>
      <method name="IsHighPrintAllowed" const="true" return="bool"/>
      <method name="GetUValue" return="const unsigned char*" const="true"/>
      <method name="GetOValue" return="const unsigned char*" const="true"/>
      <method name="GetEncyptionKey" return="const unsigned char*" const="true"/>
      <method name="GetPValue" return="pdf_int32" const="true"/>
      <method name="GetRevision" return="int" const="true"/>
      <method name="GetKeyLength" return="int" const="true"/>
      <method name="IsMetadataEncrypted" const="true" return="bool"/>
      <method name="Encrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>
      <method name="Decrypt" const="true">
        <argument name="inStr" type="const unsigned char*"/>
        <argument name="inLen" type="pdf_long" />
        <argument name="outStr" type="unsigned char*"/>
        <argument name="outLen" type="pdf_long &amp;"/>
      </method>
      <method name="CalculateStreamLength" const="true" return="pdf_long">
        <argument name="length" type="pdf_long" />
      </method>
      <method name="SetCurrentReference" >
        <argument name="rRef" type="PoDoFo::PdfReference"/>
      </method>
    </class>
    <class name="PdfEncryptSHABase" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncryptSHABase" implementation_class_header="PoDoFo/base/PdfEncrypt.h">
      <constructor name="Default"/>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfEncrypt"/>
      </constructor>
      <method name="GenerateEncryptionKey" >
        <argument name="documentID" type="PdfString"/>
      </method>
      <method name="CreateEcryptionDictionary" const="true">
        <argument name="rDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="CreateEncryptionOutputStream" return="PoDoFo::PdfOutputStream" >
        <argument name="pOutputStream" type="PoDoFo::PdfOutputStream"/>
      </method>
      <method name="CreateEncryptionInputStream" return="PoDoFo::PdfInputStream" >
        <argument name="pInputStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <method name="Authenticate" return="bool" >
        <!-- Name duplicate -->
        <argument name="password" type="const char*" />
        <argument name="documentID" type="PoDoFo::PdfString"/>
      </method>
      <method name="GetUValue" return="const unsigned char*" const="true"/>
      <method name="GetOValue" return="const unsigned char*" const="true"/>
      <method name="GetPermsValue" return="const unsigned char*" const="true"/>
      <method name="CalculateStreamLength" const="true" return="pdf_long">
        <argument name="length" type="pdf_long" />
      </method>
      <method name="CalculateStreamOffset" const="true" return="pdf_long"/>
      <method name="Authenticate" return="bool" >
        <!-- Name duplicate -->
        <argument name="documentID" type="const char*" />
        <argument name="password" type="const char*" />
        <argument name="uValue" type="const char*" />
        <argument name="ueValue" type="const char*" />
        <argument name="oValue" type="const char*" />
        <argument name="oeValue" type="const char*" />
        <argument name="pValue" type="int" />
        <argument name="permsValue" type="const char*" />
        <argument name="lengthValue" type="int" />
        <argument name="rValue" type="int" />
      </method>
    </class>
    <class name="PdfEncryptAESBase" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncryptAESBase" implementation_class_header="PoDoFo/base/PdfEncrypt.h"/>
    <class name="PdfEncryptRC4Base" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncryptRC4Base" implementation_class_header="PoDoFo/base/PdfEncrypt.h"/>
    <class name="PdfEncryptMD5Base" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncryptMD5Base" implementation_class_header="PoDoFo/base/PdfEncrypt.h" base="PoDoFo::PdfEncrypt" >
      <constructor name="Default"/>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfEncrypt"/>
      </constructor>
      <method name="CreateEcryptionDictionary" const="true">
        <argument name="rDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="CreateEncryptionOutputStream" return="PoDoFo::PdfOutputStream" >
        <argument name="pOutputStream" type="PoDoFo::PdfOutputStream"/>
      </method>
      <method name="CreateEncryptionInputStream" return="PoDoFo::PdfInputStream" >
        <argument name="pInputStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <method name="Authenticate" return="bool" >
        <!-- Name duplicate -->
        <argument name="password" type="const char*" />
        <argument name="documentID" type="PoDoFo::PdfString"/>
      </method>
      <method name="Encrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>
      <method name="GenerateEncryptionKey" >
        <argument name="documentID" type="PdfString"/>
      </method>
      <method name="GetMD5String" return="PoDoFo::PdfString">
        <argument name="pBuffer" type="const unsigned char*"/>
        <argument name="nLength" type="int"/>
      </method>
      <method name="GetMD5Binary">
        <argument name="data" type="const unsigned char*"/>
        <argument name="length" type="int"/>
        <argument name="digest" type="unsigned char"/>
      </method>
      <method name="CalculateStreamLength" const="true" return="pdf_long">
        <argument name="length" type="pdf_long" />
      </method>
      <method name="CalculateStreamOffset" const="true" return="pdf_long"/>
      <method name="Authenticate" return="bool" >
        <!-- Name duplicate -->
        <argument name="documentID" type="const char*" />
        <argument name="password" type="const char*" />
        <argument name="uValue" type="const char*" />
        <argument name="oValue" type="const char*" />
        <argument name="pValue" type="int" />
        <argument name="lengthValue" type="int" />
        <argument name="rValue" type="int" />
      </method>
    </class>
    <class name="PdfEncryptAESV2Base" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncryptAESV2Base" implementation_class_header="PoDoFo/base/PdfEncrypt.h" base="PoDoFo::PdfEncryptMD5Base">
      <constructor name="FromUserdata">
        <argument name="oValue" type="PoDoFo::PdfString"/>
        <argument name="uValue" type="PoDoFo::PdfString"/>
        <argument name="pValue" type="int"/>
        <argument name="bEncryptMetadata" type="bool"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfEncrypt"/>
      </constructor>
      <constructor name="FromPass">
        <argument name="oValue" type="const char*"/>
        <argument name="uValue" type="const char*"/>
        <argument name="protection" type="int"/>
      </constructor>
      <method name="CreateEncryptionOutputStream" return="PoDoFo::PdfOutputStream" >
        <argument name="pOutputStream" type="PoDoFo::PdfOutputStream"/>
      </method>
      <method name="CreateEncryptionInputStream" return="PoDoFo::PdfInputStream" >
        <argument name="pInputStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <method name="Authenticate" return="bool" >
        <argument name="password" type="const char*" />
        <argument name="documentID" type="PoDoFo::PdfString"/>
      </method>
      <method name="Encrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>
      <method name="Decrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>

      <method name="GenerateEncryptionKey" >
        <argument name="documentID" type="PdfString"/>
      </method>
      <method name="CalculateStreamLength" const="true" return="pdf_long">
        <argument name="length" type="pdf_long" />
      </method>
      <method name="CalculateStreamOffset" const="true" return="pdf_long"/>
    </class>
    <class name="PdfEncryptAESV3Base" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncryptAESV3Base" implementation_class_header="PoDoFo/base/PdfEncrypt.h" base="PoDoFo::PdfEncryptMD5Base">
      <constructor name="FromUserdata">
        <argument name="oValue" type="PoDoFo::PdfString"/>
        <argument name="oeValue" type="PoDoFo::PdfString"/>
        <argument name="uValue" type="PoDoFo::PdfString"/>
        <argument name="ueValue" type="PoDoFo::PdfString"/>
        <argument name="pValue" type="int"/>
        <argument name="permValue" type="PoDoFo::PdfString"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfEncrypt"/>
      </constructor>
      <constructor name="FromPass">
        <argument name="oValue" type="const char*"/>
        <argument name="uValue" type="const char*"/>
        <argument name="protection" type="int"/>
      </constructor>
      <method name="CreateEncryptionOutputStream" return="PoDoFo::PdfOutputStream" >
        <argument name="pOutputStream" type="PoDoFo::PdfOutputStream"/>
      </method>
      <method name="CreateEncryptionInputStream" return="PoDoFo::PdfInputStream" >
        <argument name="pInputStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <method name="Authenticate" return="bool" >
        <argument name="password" type="const char*" />
        <argument name="documentID" type="PoDoFo::PdfString"/>
      </method>
      <method name="Encrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>
      <method name="Decrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>

      <method name="GenerateEncryptionKey" >
        <argument name="documentID" type="PdfString"/>
      </method>
      <method name="CalculateStreamLength" const="true" return="pdf_long">
        <argument name="length" type="pdf_long" />
      </method>
      <method name="CalculateStreamOffset" const="true" return="pdf_long"/>
    </class>
    <class name="PdfEncryptRC4" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncryptRC4" implementation_class_header="PoDoFo/base/PdfEncrypt.h" base="PoDoFo::PdfEncryptMD5Base">
      <constructor name="FromUserdata">
        <argument name="oValue" type="PoDoFo::PdfString"/>
        <argument name="uValue" type="PoDoFo::PdfString"/>
        <argument name="pValue" type="int"/>
        <argument name="rValue" type="int"/>
        <argument name="eAlgorithm" type="PoDoFo::EPdfEncryptAlgorithm"/>
        <argument name="length" type="long"/>
        <argument name="bEncryptMetadata" type="bool"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfEncrypt"/>
      </constructor>
      <constructor name="FromPass">
        <argument name="userPassword" type="const char*"/>
        <argument name="ownerPassword" type="const char*"/>
        <argument name="protection" type="int"/>
        <argument name="eAlgorithm" type="PoDoFo::EPdfEncryptAlgorithm"/>
        <argument name="eKeyLength" type="PoDoFo::EPdfKeyLength"/>
      </constructor>
      <method name="CreateEncryptionOutputStream" return="PoDoFo::PdfOutputStream" >
        <argument name="pOutputStream" type="PoDoFo::PdfOutputStream"/>
      </method>
      <method name="CreateEncryptionInputStream" return="PoDoFo::PdfInputStream" >
        <argument name="pInputStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <method name="Authenticate" return="bool" >
        <argument name="password" type="const char*" />
        <argument name="documentID" type="PoDoFo::PdfString"/>
      </method>
      <method name="Encrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>
      <method name="Decrypt" const="true" >
        <argument name="inStr" type="const unsigned char*" />
        <argument name="inLen" type="pdf_long"/>
        <argument name="outStr" type="unsigned char*" />
        <argument name="outLen" type="pdf_long"/>
      </method>

      <method name="GenerateEncryptionKey" >
        <argument name="documentID" type="PdfString"/>
      </method>
      <method name="CalculateStreamLength" const="true" return="pdf_long">
        <argument name="length" type="pdf_long" />
      </method>
      <method name="CalculateStreamOffset" const="true" return="pdf_long"/>
    </class>
    <enumeration name="EPdfError" underlying_type="unsigned short">
      <item name="ePdfError_ErrOk"/>
      <item name="ePdfError_TestFailed"/>
      <item name="ePdfError_InvalidHandle"/>
      <item name="ePdfError_FileNotFound"/>
      <item name="ePdfError_InvalidDeviceOperation"/>
      <item name="ePdfError_UnexpectedEOF"/>
      <item name="ePdfError_OutOfMemory"/>
      <item name="ePdfError_ValueOutOfRange"/>
      <item name="ePdfError_InternalLogic"/>
      <item name="ePdfError_InvalidEnumValue"/>
      <item name="ePdfError_PageNotFound"/>
      <item name="ePdfError_NoPdfFile"/>
      <item name="ePdfError_NoXRef"/>
      <item name="ePdfError_NoTrailer"/>
      <item name="ePdfError_NoNumber"/>
      <item name="ePdfError_NoObject"/>
      <item name="ePdfError_NoEOFToken"/>
      <item name="ePdfError_InvalidTrailerSize"/>
      <item name="ePdfError_InvalidLinearization"/>
      <item name="ePdfError_InvalidDataType"/>
      <item name="ePdfError_InvalidXRef"/>
      <item name="ePdfError_InvalidXRefStream"/>
      <item name="ePdfError_InvalidXRefType"/>
      <item name="ePdfError_InvalidPredictor"/>
      <item name="ePdfError_InvalidStrokeStyle"/>
      <item name="ePdfError_InvalidHexString"/>
      <item name="ePdfError_InvalidStream"/>
      <item name="ePdfError_InvalidStreamLength"/>
      <item name="ePdfError_InvalidKey"/>
      <item name="ePdfError_InvalidName"/>
      <item name="ePdfError_InvalidEncryptionDict"/>
      <item name="ePdfError_InvalidPassword"/>
      <item name="ePdfError_InvalidFontFile"/>
      <item name="ePdfError_InvalidContentStream"/>
      <item name="ePdfError_UnsupportedFilter"/>
      <item name="ePdfError_UnsupportedFontFormat"/>
      <item name="ePdfError_ActionAlreadyPresent"/>
      <item name="ePdfError_WrongDestinationType"/>
      <item name="ePdfError_MissingEndStream"/>
      <item name="ePdfError_Date"/>
      <item name="ePdfError_Flate"/>
      <item name="ePdfError_FreeType"/>
      <item name="ePdfError_SignatureError"/>
      <item name="ePdfError_MutexError"/>
      <item name="ePdfError_UnsupportedImageFormat"/>
      <item name="ePdfError_CannotConvertColor"/>
      <item name="ePdfError_NotImplemented"/>
      <item name="ePdfError_DestinationAlreadyPresent"/>
      <item name="ePdfError_ChangeOnImmutable"/>
      <item name="ePdfError_NotCompiled"/>
      <item name="ePdfError_OutlineItemAlreadyPresent"/>
      <item name="ePdfError_NotLoadedForUpdate"/>
      <item name="ePdfError_CannotEncryptedForUpdate"/>
      <item name="ePdfError_Unknown" value="0xffff"/>
    </enumeration>
    <enumeration name="ELogSeverity" underlying_type="unsigned short">
      <item name="eLogSeverity_Critical" />
      <item name="eLogSeverity_Error" />
      <item name="eLogSeverity_Warning" />
      <item name="eLogSeverity_Information" />
      <item name="eLogSeverity_Debug" />
      <item name="eLogSeverity_None" />
      <item name="eLogSeverity_Unknown" value="0xffff"/>
    </enumeration>
    <class name="PdfErrorInfo" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfErrorInfo" implementation_class_header="PoDoFo/base/PdfError.h">
      <constructor name="Default" />
      <constructor name="FromCharInfo" >
        <argument name="line" type="int"/>
        <argument name="pszFile" type="const char*"/>
        <argument name="pszInfo" type="const char*"/>
      </constructor>
      <constructor name="FromWidecharInfo" >
        <argument name="line" type="int"/>
        <argument name="pszFile" type="const char*"/>
        <argument name="pszInfo" type="const wchar_t*"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfErrorInfo"/>
      </constructor>
      <method name="GetLine" const="true" return="int"/>
      <method name="GetFileName" const="true" return="const char*"/>
      <method name="GetInformation" const="true" return="const char*"/>
      <method name="GetInformationW" const="true" return="const char*"/>
      <method name="SetInformation" >
        <!-- Name duplicate -->
        <argument name="pszInfo" type="const char*"/>
      </method>
      <method name="SetInformation" >
        <!-- Name duplicate -->
        <argument name="pszInfo" type="const wchar_t*"/>
      </method>
    </class>
    <class name="TDequeErrorInfo" lifecycle="copy_semantic" implementation_class_name="PoDoFo::TDequeErrorInfo" implementation_class_header="PoDoFo/base/PdfError.h">
      <!--typedef -->
    </class>
    <class name="TIDequeErrorInfo" lifecycle="copy_semantic" implementation_class_name="PoDoFo::TIDequeErrorInfo" implementation_class_header="PoDoFo/base/PdfError.h">
      <!--typedef -->
    </class>
    <class name="TCIDequeErrorInfo" lifecycle="copy_semantic" implementation_class_name="PoDoFo::TCIDequeErrorInfo" implementation_class_header="PoDoFo/base/PdfError.h">
      <!--typedef -->
    </class>
    <class name="PdfError" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfError" implementation_class_header="PoDoFo/base/PdfError">
      <!--typedef -->
      <class name="LogMessageCallback" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfError::LogMessageCallback" implementation_class_header="PoDoFo/base/PdfError.h">
        <!--typedef -->
        <method name="LogMessage">
          <!-- Name duplicate -->
          <argument name="eLogSeverity" type="PoDoFo::ELogSeverity"/>
          <argument name="pszPrefix" type="const char*"/>
          <argument name="pszMsg" type="const char*"/>
          <argument name="va_list&amp;" type="PoDoFo::ELogSeverity"/>
        </method>
        <method name="LogMessage">
          <!-- Name duplicate -->
          <argument name="eLogSeverity" type="PoDoFo::ELogSeverity"/>
          <argument name="pszPrefix" type="const char*"/>
          <argument name="pszMsg" type="const wchar_t*"/>
          <argument name="va_list&amp;" type="PoDoFo::ELogSeverity"/>
        </method>
      </class>
      <method name="SetLogMessageCallback" return="PoDoFo::PdfError::LogMessageCallback" >
        <argument name="fLogMessageCallback" type="PoDoFo::PdfError::LogMessageCallback"/>
      </method>
      <constructor name="Default"/>
      <constructor name="FromErrCode">
        <argument name="eCode" type="PoDoFo::EPdfError" />
        <argument name="pszFile" type="const char*"/>
        <argument name="line" type="int" />
        <argument name="pszInformation" type="const char*" />
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfError"/>
      </constructor>
      <method name="GetError" const="true" return="PoDoFo::EPdfError"/>
      <method name="GetCallstack" const="true" return="PoDoFo::TDequeErrorInfo"/>
      <method name="SetError" >
        <argument name="eCode" type="PoDoFo::EPdfError"/>
        <argument name="pszFile" type="const char*" />
        <argument name="line" type="int" />
        <argument name="pszInformation" type="const char*"/>
      </method>
      <method name="SetErrorInformation" >
        <!-- Name duplicate -->
        <argument name="pszInformation" type="const char*"/>
      </method>
      <method name="SetErrorInformation" >
        <!-- Name duplicate -->
        <argument name="pszInformation" type="const wchar_t*"/>
      </method>
      <method name="AddToCallstack" >
        <argument name="pszFile" type="const char*"/>
        <argument name="line" type="int"/>
        <argument name="pszInformation" type="const char*"/>
      </method>
      <method name="IsError" const="true" return="bool"/>
      <method name="PrintErrorMsg" const="true" />
      <method name="what" const="true" return="const char* "/>
      <method name="ErrorName" return="const char* ">
        <argument name="eCode" type="PoDoFo::EPdfError"/>
      </method>
      <method name="ErrorMessage" return="const char* ">
        <argument name="eCode" type="PoDoFo::EPdfError"/>
      </method>
      <method name="LogMessage">
        <argument name="eLogSeverity" type="PoDoFo::ELogSeverity"/>
        <argument name="pszMsg" type="const char*" />
      </method>
      <!-- Name duplicate
            <method name="LogMessage">
                 <argument name="eLogSeverity" type="PoDoFo::ELogSeverity"/>
                 <argument name="pszMsg" type="const wchar_t*" />
             </method>
             -->
      <method name="EnableLogging" >
        <argument name="bEnable" type="bool"/>
      </method>
      <method name="LoggingEnabled" return="bool" />
      <method name="DebugMessage" >
        <argument name="pszMsg" type="const char*"/>
      </method>
      <method name="EnableDebug" >
        <argument name="bEnable" type="bool"/>
      </method>
      <method name="DebugEnabled" return="bool"/>
    </class>
    <class name="PdfFileStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFileStream" implementation_class_header="PoDoFo/base/PdfFileStream.h" base="PoDoFo::PdfStream" >
      <constructor name="Default">
        <argument name="pParent" type="PoDoFo::PdfObject"/>
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
      </constructor>
      <method name="SetEncrypted" >
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="Write" >
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
      </method>
      <method name="GetCopy" const="true" >
        <argument name="pBuffer" type="char**"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <!-- <method name="GetCopy" const="true" >
                <argument name="pStream" type="PoDoFo::PdfOutputStream"/>
            </method>
            -->
      <method name="GetLength" const="true" return="pdf_length"/>
    </class>
    <class name="TVecFilters" lifecycle="copy_semantic" implementation_class_name="PoDoFo::TVecFilters" implementation_class_header="PoDoFo/base/PdfFilter.h"></class>
    <!--typedef -->
    <class name="TIVecFilters" lifecycle="copy_semantic" implementation_class_name="PoDoFo::TIVecFilters" implementation_class_header="PoDoFo/base/PdfFilter.h"></class>
    <!--typedef -->
    <class name="TCIVecFilters" lifecycle="copy_semantic" implementation_class_name="PoDoFo::TCIVecFilters" implementation_class_header="PoDoFo/base/PdfFilter.h"></class>
    <!--typedef -->
    <class name="PdfFilter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFilter" implementation_class_header="PoDoFo/base/PdfFilter.h">
      <constructor name="Default"/>
      <method name="CanEncode" const="true" return="bool"/>
      <method name="Encode" const="true">
        <argument name="pInBuffer" type="const char*"/>
        <argument name="lInLen" type="pdf_long" />
        <argument name="ppOutBuffer" type="char**"/>
        <argument name="plOutLen" type="pdf_long*"/>
      </method>
      <method name="BeginEncode" >
        <argument name="pOutput" type="PoDoFo::PdfOutputStream"/>
      </method>
      <method name="EncodeBlock" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndEncode"/>
      <method name="CanDecode" const="true" return="bool"/>
      <method name="Decode" const="true">
        <argument name="pInBuffer" type="const char*"/>
        <argument name="lInLen" type="pdf_long" />
        <argument name="ppOutBuffer" type="char**"/>
        <argument name="plOutLen" type="pdf_long*"/>
      </method>
      <method name="BeginEncode" >
        <argument name="pOutput" type="PoDoFo::PdfOutputStream"/>
        <argument name="pDecodeParms" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="EncodeBlock" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndEncode"/>
      <method name="GetType" const="true" return="PoDoFo::EPdfFilter"/>
    </class>
    <class name="PdfFilterFactory" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFilterFactory" implementation_class_header="PoDoFo/base/PdfFilter.h">
      <method name="Create" return="PoDoFo::PdfFilter" >
        <argument name="eFilter" type="PoDoFo::EPdfFilter"/>
      </method>
      <method name="CreateEncodeStream" >
        <argument name="filters" type="PoDoFo::TVecFilters" />
        <argument name="pStream" type="PooFo::PdfOutputStream"/>
      </method>
      <method name="CreateDecodeStream" >
        <argument name="filters" type="PoDoFo::TVecFilters" />
        <argument name="pStream" type="PooFo::PdfOutputStream"/>
        <argument name="pDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="FilterNameToType" return="PoDoFo::EPdfFilter">
        <argument name="name" type="PoDoFo::PdfName" />
        <argument name="bSupportShortNames" type="bool"/>
      </method>
      <method name="FilterTypeToName" return="const char*">
        <argument name="eFilter" type="PoDoFo::EPdfFilter" />
      </method>
      <method name="CreateFilterList" return="PoDoFo::TVecFilters">
        <argument name="pObject" type="PoDoFo::PdfObject" />
      </method>
    </class>
    <class name="PdfHexFilter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfHexFilter" implementation_class_header="PoDoFo/base/PdfFiltersPrivate.h" base="PoDoFo::PdfFilter">
      <constructor name="Default"/>
      <method name="CanEncode" return="bool" const="true"/>
      <method name="EncodeBlockImpl" >
        <argument name="pBuffer" type="const char*" />
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="CanDecode" const="true" return="bool"/>
      <method name="BeginDecodeImpl" >
        <argument name="" type="PoDoFo:PdfDictionary"/>
      </method>
      <method name="DecodeBlockImpl" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndDecodeImpl" />
      <method name="GetType" const="true" return="PoDoFo::EPdfFilter"/>
    </class>
    <class name="PdfAscii85Filter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfAscii85Filter" implementation_class_header="PoDoFo/base/PdfFiltersPrivate.h" base="PoDoFo::PdfFilter">
      <constructor name="Default"/>
      <method name="CanEncode" return="bool" const="true"/>
      <method name="BeginEncodeImpl"/>
      <method name="EncodeBlockImpl" >
        <argument name="pBuffer" type="const char*" />
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndEncodeImpl"/>
      <method name="CanDecode" const="true" return="bool"/>
      <method name="BeginDecodeImpl" >
        <argument name="" type="PoDoFo:PdfDictionary"/>
      </method>
      <method name="DecodeBlockImpl" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndDecodeImpl" />
      <method name="GetType" const="true" return="PoDoFo::EPdfFilter"/>
    </class>
    <class name="PdfFlateFilter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFlateFilter" implementation_class_header="PoDoFo/base/PdfFiltersPrivate.h" base="PoDoFo::PdfFilter">
      <constructor name="Default"/>
      <method name="CanEncode" return="bool" const="true"/>
      <method name="BeginEncodeImpl"/>
      <method name="EncodeBlockImpl" >
        <argument name="pBuffer" type="const char*" />
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndEncodeImpl"/>
      <method name="CanDecode" const="true" return="bool"/>
      <method name="BeginDecodeImpl" >
        <argument name="" type="PoDoFo:PdfDictionary"/>
      </method>
      <method name="DecodeBlockImpl" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndDecodeImpl" />
      <method name="GetType" const="true" return="PoDoFo::EPdfFilter"/>
    </class>
    <class name="PdfRLEFilter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfRLEFilter" implementation_class_header="PoDoFo/base/PdfFiltersPrivate.h" base="PoDoFo::PdfFilter">
      <constructor name="Default"/>
      <method name="CanEncode" return="bool" const="true"/>
      <method name="BeginEncodeImpl"/>
      <method name="EncodeBlockImpl" >
        <argument name="pBuffer" type="const char*" />
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndEncodeImpl"/>
      <method name="CanDecode" const="true" return="bool"/>
      <method name="BeginDecodeImpl" >
        <argument name="" type="PoDoFo:PdfDictionary"/>
      </method>
      <method name="DecodeBlockImpl" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="GetType" const="true" return="PoDoFo::EPdfFilter"/>
    </class>
    <class name="PdfLZWFilter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfLZWFilter" implementation_class_header="PoDoFo/base/PdfFiltersPrivate.h" base="PoDoFo::PdfFilter">
      <constructor name="Default"/>
      <method name="CanEncode" return="bool" const="true"/>
      <method name="BeginEncodeImpl"/>
      <method name="EncodeBlockImpl" >
        <argument name="pBuffer" type="const char*" />
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndEncodeImpl"/>
      <method name="CanDecode" const="true" return="bool"/>
      <method name="BeginDecodeImpl" >
        <argument name="" type="PoDoFo:PdfDictionary"/>
      </method>
      <method name="DecodeBlockImpl" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="EndDecodeImpl" />
      <method name="GetType" const="true" return="PoDoFo::EPdfFilter"/>
    </class>
    <class name="PdfImmediateWriter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfImmediateWriter" implementation_class_header="PoDoFo/base/PdfImmediateWriter.h" base="PoDoFo::PdfWriter">

    </class>
    <!--
        PdfImmediateWriter.h
        -->
    <class name="PdfInputDevice" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfInputDevice" implementation_class_header="PoDoFo/base/PdfInputDevice.h">
      <constructor name="FromFile" >
        <argument name="pszFilename" type="const char*"/>
      </constructor>
      <constructor name="FromBuffer" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="size_t"/>
      </constructor>
      <constructor name="FromStream" >
        <argument name="pInStream" type="const std::istream*"/>
      </constructor>
      <method name="Close" />
      <method name="Tell" const="true" return="std::streamoff"/>
      <method name="GetChar" return="int" const="true"/>
      <method name="Look" return="int" const="true" />
      <method name="Seek" >
        <argument name="off" type="std::streamoff"/>
        <argument name="dir" type="std::ios_base::seekdir"/>
      </method>
      <method name="Read" return="std::streamoff" >
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="std::streamsize"/>
      </method>
      <method name="Eof" return="bool" const="true"/>
      <method name="Bad" return="bool" const="true"/>
      <method name="Clear" const="true">
        <argument name="state" type="std::ios_base::iostate"/>
      </method>
      <method name="IsSeekable" return="bool" const="true"/>
    </class>
    <class name="PdfInputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfInputStream" implementation_class_header="PoDoFo/base/PdfInputStream.h">
      <method name="Read" return="pdf_long" >
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="pdf_long" />
        <argument name="pTotalLeft" type="pdf_long*"/>
      </method>
    </class>
    <class name="PdfFileInputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFileInputStream" implementation_class_header="PoDoFo/base/PdfInputStream.h" base="PoDoFo::PdfInputStream">
      <constructor name="FromFile">
        <argument name="pszFileName" type="const char*"/>
      </constructor>
      <method name="Read" return="pdf_long" >
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="pdf_long" />
        <argument name="" type="pdf_long*"/>
      </method>
      <method name="GetFileLength" return="pdf_long"/>
      <method name="GetHandle" return="FILE*"/>
    </class>
    <class name="PdfMemoryInputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfMemoryInputStream" implementation_class_header="PoDoFo/base/PdfInputStream.h" base="PoDoFo::PdfInputStream">
      <constructor name="FromBuffer">
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="size_t"/>
      </constructor>
      <method name="Read" return="pdf_long" >
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="pdf_long" />
        <argument name="" type="pdf_long*"/>
      </method>
    </class>
    <class name="PdfDeviceInputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDeviceInputStream" implementation_class_header="PoDoFo/base/PdfInputStream.h" base="PoDoFo::PdfInputStream">
      <constructor name="FromDevice">
        <argument name="pDevice" type="PoDoFo::PdfInputDevice"/>
      </constructor>
      <method name="Read" return="pdf_long" >
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="pdf_long" />
        <argument name="" type="pdf_long*"/>
      </method>
    </class>
    <class name="PdfMemStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfMemStream" implementation_class_header="PoDoFo/base/PdfMemStream.h" base="PoDoFo::PdfStream">
      <constructor name="Default" >
        <argument name="pParent" type="PoDoFo::PdfObject"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfMenStream"/>
      </constructor>
      <method name="Write" >
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="GetCopy" const="true" >
        <argument name="pBuffer" type="char**"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <!-- <method name="GetCopy" const="true" >
                <argument name="pStream" type="PoDoFo::PdfOutputStream"/>
            </method>
            -->
      <method name="Get" const="true" return="const char*"/>
      <method name="GetLength" return="pdf_long" const="true"/>
      <method name="FlateCompress" />
      <method name="Uncompress"/>
    </class>
    <class name="PdfName" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfName" implementation_class_header="PoDoFo/base/PdfName.h" base="PoDoFo::PdfDataType">
      <constructor name="Default"/>
      <constructor name="FromChar" >
        <argument name="pszName" type="const char*"/>
      </constructor>
      <constructor name="FromCharAndLength" >
        <argument name="pszName" type="const char*"/>
        <argument name="lLen" type="long"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfName"/>
      </constructor>
      <method name="FromEscaped" return="PoDoFo::PdfName" >
        <argument name="sName" type="const char*"/>
      </method>
      <!--
            <method name="FromEscaped" return="PoDoFo::PdfName" >
                <argument name="sName" type="const char*"/>
                <argument name="ilength" type="pdf_long/"
            </method>
            -->
      <method name="GetEscapedName" const="true" return="const char*"/>
      <method name="Write" const="true">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice" />
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="GetName" const="const" return="const char*"/>
      <method name="GetLength" const="const" return="size_t"/>
    </class>
    <class name="PdfObjectStreamParserObject" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfObjectStreamParserObject" implementation_class_header="PoDoFo/base/PdfObjectStreamParserObject.h">
      <class name="ObjectIdList" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfObjectStreamParserObject::ObjectIdList" implementation_class_header="PoDoFo/base/PdfObjectStreamParserObject.h">
      </class>
      <constructor name="Default">
        <argument name="pParser" type="PoDoFo::PdfParserObject" />
        <argument name="pVecObjects" type="PoDoFo::PdfObjects" />
        <argument name="rBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </constructor>
      <method name="Parse" >
        <argument name="" type="PoDoFo::PdfObjectStreamParserObject::ObjectIdList"/>
      </method>
    </class>
    <class name="PdfObjectStreamParserObject" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfObjectStreamParserObject" implementation_class_header="PoDoFo/base/PdfObjectStreamParserObject.h">
      <constructor name="Default"/>
      <constructor name="ToFile">
        <argument name="pszFileName" type="const char*"/>
        <argument name="bTruncate" type="bool"/>
      </constructor>
      <constructor name="ToBuffer">
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="size_t"/>
      </constructor>
      <constructor name="ToStream">
        <argument name="pOutStream" type="const std::ostream*"/>
      </constructor>
      <constructor name="ToRefCountedBuffer">
        <argument name="pOutBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
      </constructor>
      <method name="GetLength" const="true" return="size_t"/>
      <method name="Print" >
        <argument name="pszFormat" type="const char *"/>
      </method>
      <method name="PrintV" >
        <argument name="pszFormat" type="const char *"/>
        <argument name="lBytes" type="long"/>
        <argument name="argptr" type="va_list"/>
      </method>
      <method name="PrintVLen" >
        <argument name="pszFormat" type="const char *"/>
        <argument name="args" type="va_list"/>
      </method>
      <method name="Write" >
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="size_t"/>
      </method>
      <method name="Read"  return="size_t">
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="size_t"/>
      </method>
      <method name="Seek" >
        <argument name="offset" type="size_t"/>
      </method>
      <method name="Tell" return="size_t" const="true" />
      <method name="Flush" />
    </class>
    <class name="PdfImmediateWriter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfImmediateWriter" implementation_class_header="PoDoFo/base/PdfImmediateWriter.h">
      <constructor name="Default">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="pVecObjects" type="PoDoFo::PdfVecObjects"/>
        <argument name="pTrailer" type="PoDoFo::PdfObject"/>
        <argument name="eVersion" type="PoDoFo::EPdfVersion"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
      </constructor>
      <method name="GetWriteMode" const="true" return="PoDoFo::EPdfWriteMode"/>
      <method name="GetPdfVersion" const="true" return="PoDoFo::EPdfVersion"/>
    </class>
    <class name="PdfOutputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfOutputStream" implementation_class_header="PoDoFo/base/PdfOutputStream.h">
      <method name="Write" return="pdf_long" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <!--
            <method name="Write" return="pdf_long" >
                <argument name="s" type="const char*"/>
            </method>
            -->
      <method name="Close" />
    </class>
    <class name="PdfFileOutputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFileOutputStream" implementation_class_header="PoDoFo/base/PdfOutputStream.h" base="PoDoFo::PdfOutputStream">
      <constructor name="Default">
        <argument name="pszFileName" type="const char*"/>
      </constructor>
      <method name="Write" return="pdf_long" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="Close" />
    </class>
    <class name="PdfMemoryOutputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfMemoryOutputStream" implementation_class_header="PoDoFo/base/PdfOutputStream.h" base="PoDoFo::PdfOutputStream">
      <constructor name="Default">
        <argument name="lInitial" type="pdf_long"/>
      </constructor>
      <constructor name="ToBuffer">
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="pdf_long"/>
      </constructor>
      <method name="Write" return="pdf_long" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="Close"/>
      <method name="TkeBuffer" return="char*"/>
      <method name="GetLength" const="true" return="pdf_long" />
    </class>

    <class name="PdfDeviceOutputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDeviceOutputStream" implementation_class_header="PoDoFo/base/PdfOutputStream.h" base="PoDoFo::PdfOutputStream">
      <constructor name="Default">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
      </constructor>
      <method name="Write" return="pdf_long" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="Close" />
    </class>
    <class name="PdfBufferOutputStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfBufferOutputStream" implementation_class_header="PoDoFo/base/PdfOutputStream.h" base="PoDoFo::PdfOutputStream">
      <constructor name="Default">
        <argument name="pBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
      </constructor>
      <method name="Write" return="pdf_long" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="Close"/>
      <method name="GetLength" const="true" return="pdf_long" />
    </class>


    <class name="PdfParser" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfParser" implementation_class_header="PoDoFo/base/PdfParser.h" base="PoDoFo::PdfTokenizer">
      <constructor name="Default">
        <argument name="pVecobjects" type="PoDoFo::PdfVecobjects"/>
      </constructor>
      <constructor name="FromFile">
        <argument name="pVecobjects" type="PoDoFo::PdfVecobjects"/>
        <argument name="pszFilename" type="const char *"/>
        <argument name="bLoadOnDemand" type="bool"/>
      </constructor>
      <constructor name="FromBuffer">
        <argument name="pVecobjects" type="PoDoFo::PdfVecobjects"/>
        <argument name="pBuffer" type="const char *"/>
        <argument name="lLen" type="long"/>
        <argument name="bLoadOnDemand" type="bool"/>
      </constructor>
      <constructor name="FromDevice">
        <argument name="pVecobjects" type="PoDoFo::PdfVecobjects"/>
        <argument name="rDevice" type="PoDoFo::PdfRefCountedInputDevice"/>
        <argument name="bLoadOnDemand" type="bool"/>
      </constructor>
      <method name="ParseFile" >
        <argument name="pszFileName" type="const char*" />
        <argument name="bLoadOnDemand" type="bool"/>
      </method>
      <!--
            <method name="ParseFile" >
                <argument name="pszFileName" type="const char*" />
                <argument name="lLen" type="long"/>
                <argument name="bLoadOnDemand" type="bool"/>
            </method>
            <method name="ParseFile" >
                <argument name="rDevice" type="PoDoFo::PdfRefCountedInputDevice" />
                <argument name="bLoadOnDemand" type="bool"/>
            </method>
            -->
      <method name="QuickEncryptedCheck" return="bool">
        <argument name="pszFilename" type="const char*"/>
      </method>
      <method name="GetNumberOfIncrementalUpdates" const="true" return="int"/>
      <method name="GetObjects" return="PoDoFo::PdfVecObjects" const="true"/>
      <method name="GetPdfVersion" return="PoDoFo::EPdfVersion" const="true"/>
      <method name="GetPdfVersionString" const="true" return="const"/>
      <method name="Gettrailer" return="PoDoFo::PdfObject" const="true"/>
      <method name="GetLoadOnDemand" return="bool" const="true"/>
      <method name="IsLinearised" return="bool" const="true"/>
      <method name="GetFileSize" const="true" return="size_t"/>
      <method name="GetEncrypt" return="PoDoFo::PdfEncrypt" const="true"/>
      <method name="TakeEncrypt" return="PoDoFo::PdfEncrypt" const="true"/>
      <method name="SetPassword" >
        <argument name="sPassword" type="const char*"/>
      </method>
      <method name="IsStrictParsing" const="true" return="bool"/>
      <method name="SetStrictParsing" >
        <argument name="bStrict" type="bool"/>
      </method>
      <property name="IgnoreBrokenObjects" type="bool"/>
      <property name="MaxObjectsCount" type="long"/>
      <method name="GetXRefOffset" return="pdf_long" />
      <method name="HasXRefStream" return="bool"/>
    </class>
    <class name="PdfParserObject" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfParserObject" implementation_class_header="PoDoFo/base/PdfParserObject.h" base="PoDoFo::PdfObject">
      <constructor name="FromDevice">
        <argument name="pCreator" type="PoDoFo::PdfVecObjects"/>
        <argument name="rDevice" type="PoDoFo::PdfRefCountedInputDevice" />
        <argument name="rBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
        <argument name="lOffset" type="pdf_long" />
      </constructor>
      <!-- explicit
            <constructor name="FromBuffer">
                <argument name="rBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
            </constructor>
            -->
      <method name="ParseFile" >
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
        <argument name="bIsTrailer" type="bool"/>
      </method>
      <method name="HasStreamToParse" const="true" return="bool"/>
      <method name="IsLoadOnDemand" return="bool" const="true"/>
      <method name="SetLoadOnDemand">
        <argument name="bDelayed" type="bool"/>
      </method>
      <method name="SetObjectNumber" >
        <argument name="nObjNo" type="unsigned int"/>
      </method>
      <method name="FreeObjectMemory" >
        <argument name="bForce" type="bool"/>
      </method>
      <method name="GetOffset" const="true" return="pdf_int64" />
    </class>
    <class name="PdfRect" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfRect" implementation_class_header="PoDoFo/base/PdfRect.h">
      <constructor name="Default"/>
      <constructor name="FromParams" >
        <argument name="left" type="double"/>
        <argument name="bottom" type="double"/>
        <argument name="width" type="double"/>
        <argument name="height" type="double"/>
      </constructor>
      <constructor name="FromArray">
        <argument name="inArray" type="PoDoFo::PdfArray"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfRect"/>
      </constructor>
      <method name="ToVariant" const="true" >
        <argument name="var" type="PoDoFo::PdfVariant"/>
      </method>
      <method name="ToString" const="true" return="const char*"/>
      <method name="FromArray" >
        <argument name="inarray" type="PoDoFo::PdfArray"/>
      </method>
      <method name="Intersect" >
        <argument name="rRect" type="PoDoFo::PdfRect"/>
      </method>
      <property name="Bottom" type="double"/>
      <property name="Left" type="double"/>
      <property name="Width" type="double"/>
      <property name="Height" type="double"/>
    </class>
    <class name="PdfRefCountedBuffer" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfRefCountedBuffer" implementation_class_header="PoDoFo/base/PdfRefCountedBuffer.h">
      <constructor name="Default"/>
      <constructor name="FromBuffer">
        <argument name="pBuffer" type="char*"/>
        <argument name="lSize" type="size_t"/>
      </constructor>
      <constructor name="FromSize" >
        <argument name="lSize" type="size_t"/>
      </constructor>
      <constructor name="FromOther" >
        <argument name="rhs" type="PoDoFo::PdfRefCountedBuffer"/>
      </constructor>
      <method name="GetBuffer" const="true" return="char*"/>
      <method name="GetSize" const="true" return="size_t"/>
      <method name="Resize" >
        <argument name="lSize" type="size_t"/>
      </method>
      <method name="SetTakePossesion" >
        <argument name="bTakePossession" type="bool"/>
      </method>
      <method name="TakePossesion" const="true" return="bool"/>
    </class>
    <class name="PdfInputDevice" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfInputDevice" implementation_class_header="PoDoFo/base/PdfInputDevice.h">
      <constructor name="Default"/>
      <constructor name="FromFile">
        <argument name="pszFilename" type="const char*"/>
        <argument name="pszMode" type="const char*"/>
      </constructor>
      <constructor name="FromBuffer">
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="size_t"/>
      </constructor>
      <constructor name="FromDevice">
        <argument name="pDevice" type="PoDoFo::PdfInputDevice"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfRefCountedInputDevice"/>
      </constructor>
      <method name="Device" return="PoDoFo::PdfInputDevice" const="true"/>
    </class>
    <class name="PdfReference" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfReference" implementation_class_header="PoDoFo/base/PdfReference.h" base="PoDoFo::PdfDataType">
      <constructor name="Default"/>
      <constructor name="FromObject" >
        <argument name="bObjNo" type="pdf_objnum"/>
        <argument name="nGenerationNo" type="pdf_gennum"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfReference"/>
      </constructor>
      <method name="ToString" const="true" return="const char*"/>
      <method name="Write" const="true">
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice" />
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode" />
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt" />
      </method>
      <method name="SetObjectNumber" >
        <argument name="o" type="pdf_objnum" />
      </method>
      <method name="ObjectNumber"  const="true" return="pdf_objnum"/>
      <method name="SetGenerationNumber" >
        <argument name="g" type="pdf_getnum"/>
      </method>
      <method name="GenerationNumber" const="true" return="pdf_getnum"/>
      <method name="IsIndirect" return="bool" const="true"/>
    </class>
    <class name="PdfStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfStream" implementation_class_header="PoDoFo/base/PdfStream.h">
      <constructor name="Default" >
        <argument name="pParent" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="Write" >
        <argument name="pDevice" type="PoDoFo::PdfDevice" />
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="Set" >
        <argument name="szBuffer" type="const char*"/>
        <argument name="lLen" type="pdf_long" />
        <argument name="vecFilters" type="PoDoFo::TVecFilters"/>
      </method>

      <!-- Name override
            <method name="Set" >
                <argument name="szBuffer" type="const char*"/>
                <argument name="lLen" type="pdf_long" />
            </method>
            <method name="Set" >
                <argument name="pStream" type="PoDoFo::PdfInputStream"/>
            </method>
            <method name="Set" >
                <argument name="pStream" type="PoDoFo::PdfInputStream"/>
                <argument name="vecFilters" type="PoDoFo::TVecFilters"/>
            </method>
            <method name="Set" >
                <argument name="pszString" type="const char*"/>
            </method>
            -->
      <method name="SetRawData" >
        <argument name="pStream" type="PoDoFo:PdfInputStream"/>
        <argument name="lLen" type="pdf_long"/>
      </method>
      <method name="BeginAppend" >
        <argument name="bClearExisting" type="bool"/>
      </method>
      <!-- Name override
            <method name="BeginAppend" >
                <argument name="vecFilters" type="PoDoFo::TVecFilters"/>
                <argument name="bClearExisting" type="bool"/>
                <argument name="bDeleteExisting" type="bool"/>
            </method>
            -->
      <method name="Append" >
        <argument name="pszString" type="const char*"/>
        <argument name="lLen" type="size_t"/>
      </method>
      <method name="Append" >
        <argument name="pszString" type="const char*"/>
      </method>
      <method name="Append" >
        <argument name="sString" type="const char*&amp;"/>
      </method>
      <method name="EndAppend"/>
      <method name="IsAppending" const="true" return="bool"/>
      <method name="GetLength" return="pdf_long" const="true" />
      <method name="GetCopy" const="true" >
        <argument name="pBuffer" type="char**"/>
        <argument name="lLen" type="pdf_long*"/>
      </method>
      <!-- Name override
            <method name="GetCopy" const="true" >
                <argument name="pStream" type="PoDoFo:PdfInputStream"/>
            </method>
            -->
      <method name="GetFilteredCopy" const="true" >
        <argument name="pBuffer" type="char**"/>
        <argument name="lLen" type="pdf_long*"/>
      </method>
      <!-- Name override
            <method name="GetFilteredCopy" const="true" >
                <argument name="pStream" type="PoDoFo:PdfInputStream"/>
            </method>
            -->
    </class>
    <class name="PdfString" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfString" implementation_class_header="PoDoFo/base/PdfString.h" base="PoDoFo::PdfDataType">
      <constructor name="Default"/>
      <constructor name="FromChar">
        <argument name="pszString" type="const char*"/>
        <argument name="pEncoding" type="PoDoFo:PdfEncoding"/>
      </constructor>
      <!--
            <constructor name="FromString">
                <argument name="sString" type="const std::string"/>
                <argument name="pEncoding" type="PoDoFo:PdfEncoding"/>
            </constructor>
            <constructor name="FromHexStr">
                <argument name="pszString" type="const char*"/>
                <argument name="lLen" type="pdf_long"/>
                <argument name="bHex" type="bool"/>
                <argument name="pEncoding" type="PoDoFo:PdfEncoding"/>
            </constructor>
            <constructor name="FromUtf8">
                <argument name="pszStringUtf8" type="const pdf_utf8*"/>
            </constructor>
            <constructor name="FromUtf16be">
                <argument name="pszStringUtf16" type="const pdf_utf16be*"/>
            </constructor>
            <constructor name="FromUtf8">
                <argument name="pszStringUtf8" type="const pdf_utf8*"/>
                <argument name="lLen" type="pdf_long"/>
            </constructor>
            <constructor name="FromUtf16be">
                <argument name="pszStringUtf16" type="const pdf_utf16be*"/>
                <argument name="lLen" type="pdf_long"/>
            </constructor>
            -->
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfString"/>
      </constructor>
      <method name="SethexData" >
        <argument name="pszHex" type="const char*" />
        <argument name="lLen" type="pdf_long" />
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="IsValid" const="true" return="bool"/>
      <method name="IsHex" const="true" return="bool"/>
      <method name="IsUnicode" const="true" return="bool"/>
      <method name="GetString" return="const char*" const="true"/>
      <method name="GetUnicode" const="true" return="pdf_utf16be" />
      <method name="GetStringUtf8" const="true" return="const char*" />
      <method name="GetLength" const="true" return="pdf_long" />
      <method name="GetUnicodeLength" const="true" return="pdf_long" />
      <method name="GetCharacterLength" const="true" return="pdf_long" />
      <method name="Write" const="true" >
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="ToUnicode" const="true" return="PoDoFo::PdfString"/>
      <method name="GetBuffer" return="PoDoFo::PdfRefCountedBuffer"/>
    </class>
    <function name="ConvertUTF8toUTF16" implementation_function_name="PoDoFo::PdfString"  implementation_function_header="PoDoFo/base/PdfString.h" return="pdf_long">
      <argument name="pszUtf8" type="const pdf_utf8*"/>
      <argument name="pszUtf16" type="pdf_utf16be*"/>
      <argument name="lLenUtf16" type="pdf_long"/>
    </function>
    <function name="ConvertUTF8toUTF16" implementation_function_name="PoDoFo::PdfString"  implementation_function_header="PoDoFo/base/PdfString.h" return="pdf_long">
      <argument name="pszUtf8" type="const pdf_utf8*"/>
      <argument name="lLenUtf8" type="pdf_long"/>
      <argument name="pszUtf16" type="pdf_utf16be*"/>
      <argument name="lLenUtf16" type="pdf_long"/>
      <argument name="eConversion" type="PoDoFo::EPdfStringConversion"/>
    </function>
    <function name="ConvertUTF16toUTF8" implementation_function_name="PoDoFo::PdfString"  implementation_function_header="PoDoFo/base/PdfString.h" return="pdf_long">
      <argument name="pszUtf16" type="const pdf_utf16be*"/>
      <argument name="pszUtf8" type="pdf_utf8*"/>
      <argument name="lLenUtf8" type="pdf_long"/>
    </function>
    <function name="ConvertUTF8toUTF16" implementation_function_name="PoDoFo::PdfString"  implementation_function_header="PoDoFo/base/PdfString.h" return="pdf_long">
      <argument name="pszUtf16" type="const pdf_utf16be*"/>
      <argument name="lLenUtf16" type="pdf_long"/>
      <argument name="pszUtf8" type="pdf_utf8*"/>
      <argument name="lLenUtf8" type="pdf_long"/>
      <argument name="eConversion" type="PoDoFo::EPdfStringConversion"/>
    </function>
    <class name="PdfTokenizer" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfTokenizer" implementation_class_header="PoDoFo/base/PdfTokenizer.h">
      <constructor name="Default"/>
      <constructor name="FromBuffer">
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="size_t"/>
      </constructor>
      <constructor name="FromDevice">
        <argument name="pDevice" type="PoDoFo::PdfRefCountedInputDevice"/>
        <argument name="pBuffer" type="const char*"/>
      </constructor>
      <method name="GetNextToken" return="bool" >
        <argument name="pszToken" type="const char*&amp;"/>
        <argument name="peType" type="PoDoFo::EPdfTokenType"/>
      </method>
      <method name="GetNextNumber" return="pdf_long" />
      <method name="GetNextVariant" >
        <argument name="rVariant" type="PoDoFo::PdfVariant"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
      </method>
      <method name="IsWhitespace" return="bool" >
        <argument name="ch" type="const unsigned char"/>
      </method>
      <method name="IsDelimiter" return="bool" >
        <argument name="ch" type="const unsigned char"/>
      </method>
      <method name="IsRegular" return="bool" >
        <argument name="ch" type="const unsigned char"/>
      </method>
      <method name="IsPrintable" return="bool" >
        <argument name="ch" type="const unsigned char"/>
      </method>
      <method name="GetHexValue" return="int" >
        <argument name="ch" type="const unsigned char"/>
      </method>
    </class>
    <class name="PdfVecObjects" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfVecObjects" implementation_class_header="PoDoFo/base/PdfVecObjects.h">
      <class name="Observer" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfVecObjects::Observer" implementation_class_header="PoDoFo/base/PdfVecObjects.h">
        <method name="WriteObject" >
          <argument name="pObject" type="PoDoFo::PdfObject"/>
        </method>
        <method name="ParentDestructed" />
        <method name="BeginAppendStream" >
          <argument name="pStream" type="PoDoFo::PdfStream"/>
        </method>
        <method name="EndAppendStream" >
          <argument name="pStream" type="PoDoFo::PdfStream"/>
        </method>
        <method name="Finish" />
      </class>
      <class name="StreamFactory" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfVecObjects::StreamFactory" implementation_class_header="PoDoFo/base/PdfVecObjects.h">
        <method name="CreateStream" return="PoDoFo::PdfStream" >
          <argument name="pParent" type="PoDoFo::PdfObject"/>
        </method>
      </class>
      <constructor name="Default"/>
      <property name="ParentDocument" type="PoDoFo::PdfDocument" />
      <method name="SetAutoDelete" >
        <argument name="bAutoDelete" type="bool"/>
      </method>
      <method name="AutoDelete" return="bool" const="true"/>
      <property name="CanReuseObjectNumbers" type="bool"/>
      <method name="Clear"/>
      <method name="GetSize" const="true" return="size_t"/>
      <method name="GetObjectCount" const="true" return="size_t"/>
      <method name="GetObject" const="true" return="PoDoFo::PdfObject">
        <argument name="ref" type="PoDoFo::PdfReference"/>
      </method>
      <method name="GetIndex" const="true" return="size_t">
        <argument name="ref" type="PoDoFo::PdfReference"/>
      </method>
      <method name="RemoveObject"  return="PoDoFo::PdfObject">
        <argument name="ref" type="PoDoFo::PdfReference"/>
        <argument name="bMarkAsFree" type="bool"/>
      </method>
      <!-- name override
            <method name="RemoveObject" return="PoDoFo::PdfObject">
                <argument name="it" type="PoDoFo::TIVecObjects"/>
            </method>
            -->
      <method name="CreateObject" return="PoDoFo::PdfObject">
        <argument name="pszType" type="const char*"/>
      </method>
      <method name="CreateObject" return="PoDoFo::PdfObject">
        <argument name="rVariant" type="PoDoFo::PdfVariant"/>
      </method>
      <method name="AddFreeObject" >
        <argument name="rReference" type="PoDoFo::PdfReference"/>
      </method>
      <method name="GetFreeObjects" return="PoDoFo::TPdfReferenceList" const="true"/>
      <method name="RenumberObjects" >
        <argument name="pTrailer" type="PoDoFo::PdfObject"/>
        <argument name="pNotDelete" type="PoDoFo::TPdfReferenceSet"/>
        <argument name="bDoGarbageCollection" type="bool"/>
      </method>
      <method name="push_back" >
        <argument name="pObj" type="PoDoFo::PdfObject"/>
      </method>
      <method name="insert_sorted" >
        <argument name="pObj" type="PoDoFo::PdfObject"/>
      </method>
      <method name="Sort"/>
      <method name="Reserve" >
        <argument name="size" type="size_t"/>
      </method>
      <method name="GetObjectDependencies" const="true" >
        <argument name="pObj" type="PoDoFo::PdfObject"/>
        <argument name="pList" type="PoDoFo::TPdfReferenceList"/>
      </method>
      <method name="Attach" const="true" >
        <argument name="pObserver" type="PoDoFo::Observer"/>
      </method>
      <method name="Detach" const="true" >
        <argument name="pObserver" type="PoDoFo::Observer"/>
      </method>
      <method name="SetStreamFactory" >
        <argument name="pFactory" type="PoDoFo::StreamFactory"/>
      </method>
      <method name="CreateStream"  return="PoDoFo::PdfStream">
        <argument name="pParent" type="PoDoFo::PdfObject"/>
      </method>
      <!--
            <method name="CreateStream"  return="PoDoFo::PdfStream">
                <argument name="rhs" type="PoDoFo::PdfStream"/>
            </method>
            -->
      <method name="WriteObject" >
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </method>
      <method name="Finish"/>
      <method name="BeginAppendStream" >
        <argument name="pStream" type="PoDoFo::PdfStream"/>
      </method>
      <method name="EndAppendStream" >
        <argument name="pStream" type="PoDoFo::PdfStream"/>
      </method>
      <method name="begin" const="true" return="PoDoFo::TIVecObjects"/>
      <method name="end" const="true" return="PoDoFo::TIVecObjects"/>
      <method name="GetBack" const="true" return="PoDoFo::PdfObject"/>
      <method name="CollectGarbage" >
        <argument name="pTrailer" type="PoDoFo::PdfObject"/>
      </method>
      <method name="GetNextSubsetPrefix" const="true" return="const char*"/>
      <method name="SetObjectCount" >
        <argument name="rRef" type="PoDoFo::PdfReference"/>
      </method>




    </class>
    <class name="PdfWriter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfWriter" implementation_class_header="PoDoFo/base/PdfWriter.h">
      <constructor name="FromParser" >
        <argument name="pParser" type="PoDoFo::PdfParser"/>
      </constructor>
      <constructor name="New" >
        <argument name="pVecObjects" type="PoDoFo::PdfVecObjects"/>
        <argument name="pTrailer" type="PoDoFo::PdfObject"/>
      </constructor>

      <method name="Write" >
        <argument name="pszFilename" type="const char*"/>
      </method>
      <!--
            <method name="Write" >
                <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
            </method>
            -->
      <method name="WriteUpdate" >
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="PdfInputDevice" type="PoDoFo::pSourceInputDevice"/>
        <argument name="bRewriteXRefTable" type="bool"/>
      </method>
      <property name="WriteMode" type="PoDoFo::EPdfWriteMode"/>
      <property name="PdfVersion" type="PoDoFo::EPdfVersion"/>
      <property name="Linearized" type="bool"/>
      <property name="UseXRefStream" type="bool"/>
      <property name="PrevXRefOffset" type="pdf_int64"/>
      <property name="IncrementalUpdate" type="bool"/>
      <property name="Encrypted" type="PoDoFo::PdfEncrypt"/>
      <method name="GetPdfVersionString" return="const char*" const="true"/>
      <method name="GetByteOffset" >
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="pulOffset" type="pdf_long*"/>
      </method>
      <method name="WriteToBuffer" >
        <argument name="ppBuffer" type="char**"/>
        <argument name="pulLen" type="pdf_long*"/>
      </method>
      <method name="FillTrailerObject" >
        <argument name="pTrailer" type="PoDoFo::PdfObject"/>
        <argument name="lSize" type="pdf_long"/>
        <argument name="bOnlySizeKey" type="bool"/>
      </method>
    </class>
    <class name="PdfXRef" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfXRef" implementation_class_header="PoDoFo/base/PdfXRef.h">
      <constructor name="Default"/>
      <method name="AddObject" >
        <argument name="rRef" type="PoDoFo::PdfReference"/>
        <argument name="offset" type="pdf_uint64"/>
        <argument name="bUsed" type="bool"/>
      </method>
      <method name="Write" >
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
      </method>
      <method name="GetSize" const="true" return="pdf_uint32"/>
      <method name="GetOffset" const="true" return="pdf_uint64"/>
      <method name="SetFirstEmptyBlock" />
    </class>
    <class name="PdfXRefStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfXRefStream" implementation_class_header="PoDoFo/base/PdfXRefStream.h" base="PoDoFo::PdfXRef">
      <constructor name="Default">
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="pWriter" type="PoDoFo::PdfWriter"/>
      </constructor>
      <method name="GetOffset" const="true" return="pdf_uint64"/>
    </class>
    <class name="PdfXRefStreamParserObject" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfXRefStreamParserObject" implementation_class_header="PoDoFo/base/PdfXRefStreamParserObject.h" base="PoDoFo::PdfParserObject" >
      <constructor name="Default">
        <argument name="pCreator" type="PoDoFo::PdfVecObjects"/>
        <argument name="rDevice" type="PoDoFo::PdfRefCountedInputDevice"/>
        <argument name="rBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
        <argument name="pOffsets" type="PoDoFo::PdfParser::TVecOffsets"/>
      </constructor>
      <method name="Parse" />
      <method name="ReadXRefTable" />
      <method name="HasPrevious"  return="bool"/>
      <method name="GetPreviousOffset"  return="pdf_long"/>
    </class>
    <!-- doc -->
    <enumeration name="EPdfAcroFormDefaulAppearance" underlying_type="unsigned char">
      <item name="ePdfAcroFormDefaultAppearance_None"/>
      <item name="ePdfAcroFormDefaultAppearance_BlackText12pt"/>
    </enumeration>
    <class name="PdfAcroForm" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfAcroForm" implementation_class_header="PoDoFo/doc/PdfAcroForm.h" base="PdfElement">
      <constructor name="Default" >
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
        <argument name="eDefaultAppearance" type="PoDoFo::EPdfAcroFormDefaulAppearance"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="eDefaultAppearance" type="PoDoFo::EPdfAcroFormDefaulAppearance"/>
      </constructor>
      <method name="GetDocument" return="PoDoFo::PdfDocument"/>
      <property name="NeedAppearances" type="bool"/>
    </class>
    <enumeration name="EPdfAction" underlying_type="unsigned char">
      <item name="ePdfAction_GoTo"/>
      <item name="ePdfAction_GoToR"/>
      <item name="ePdfAction_GoToE"/>
      <item name="ePdfAction_Launch"/>
      <item name="ePdfAction_Thread"/>
      <item name="ePdfAction_URI"/>
      <item name="ePdfAction_Sound"/>
      <item name="ePdfAction_Movie"/>
      <item name="ePdfAction_Hide"/>
      <item name="ePdfAction_Named"/>
      <item name="ePdfAction_SubmitForm"/>
      <item name="ePdfAction_ResetForm"/>
      <item name="ePdfAction_ImportData"/>
      <item name="ePdfAction_JavaScript"/>
      <item name="ePdfAction_SetOCGState"/>
      <item name="ePdfAction_Rendition"/>
      <item name="ePdfAction_Trans"/>
      <item name="ePdfAction_GoTo3DView"/>
      <item name="ePdfAction_RichMediaExecute"/>
      <item name="ePdfAction_Unknown" value="0xff"/>
    </enumeration>
    <class name="PdfAction" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfAction" implementation_class_header="PoDoFo/doc/PdfAction.h" base="PoDoFo::PdfElement">
      <constructor name="FromObjects">
        <argument name="eAction" type="PoDoFo::EPdfAction"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument">
        <argument name="eAction" type="PoDoFo::EPdfAction"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <property name="URI" type="PoDoFo::PdfString"/>
      <property name="Script" type="PoDoFo::PdfString"/>
      <method name="HasScript" return="bool" const="true"/>
      <method name="GetType" return="PoDoFo::EPdfAction" const="true"/>
      <method name="AddToDictionary" const="true" >
        <argument name="dictionary" type="PdfDictionary"/>
      </method>
    </class>
    <enumeration name="EPdfAnnotation" underlying_type="unsigned char">
      <item name="ePdfAnnotation_Text"/>
      <item name="ePdfAnnotation_Link"/>
      <item name="ePdfAnnotation_FreeText"/>
      <item name="ePdfAnnotation_Line"/>
      <item name="ePdfAnnotation_Square"/>
      <item name="ePdfAnnotation_Circle"/>
      <item name="ePdfAnnotation_Polygon"/>
      <item name="ePdfAnnotation_PolyLine"/>
      <item name="ePdfAnnotation_Highlight"/>
      <item name="ePdfAnnotation_Underline"/>
      <item name="ePdfAnnotation_Squiggly"/>
      <item name="ePdfAnnotation_StrikeOut"/>
      <item name="ePdfAnnotation_Stamp"/>
      <item name="ePdfAnnotation_Caret"/>
      <item name="ePdfAnnotation_Ink"/>
      <item name="ePdfAnnotation_Popup"/>
      <item name="ePdfAnnotation_FileAttachement"/>
      <item name="ePdfAnnotation_Sound"/>
      <item name="ePdfAnnotation_Movie"/>
      <item name="ePdfAnnotation_Widget"/>
      <item name="ePdfAnnotation_Screen"/>
      <item name="ePdfAnnotation_PrinterMark"/>
      <item name="ePdfAnnotation_TrapNet"/>
      <item name="ePdfAnnotation_Watermark"/>
      <item name="ePdfAnnotation_3D"/>
      <item name="ePdfAnnotation_RichMedia"/>
      <item name="ePdfAnnotation_WebMedia"/>
      <item name="ePdfAnnotation_Unknown" value="0xff"/>
    </enumeration>
    <enumeration name="EPdfAnnotationFlags" underlying_type="unsigned short">
      <item name="ePdfAnnotationFlags_Invisible" value="0x0001"/>
      <item name="ePdfAnnotationFlags_Hidden" value="0x0002"/>
      <item name="ePdfAnnotationFlags_Print" value="0x0004"/>
      <item name="ePdfAnnotationFlags_NoZoom" value="0x0008"/>
      <item name="ePdfAnnotationFlags_NoRotate" value="0x0010"/>
      <item name="ePdfAnnotationFlags_NoView" value="0x0020"/>
      <item name="ePdfAnnotationFlags_ReadOnly" value="0x0040"/>
      <item name="ePdfAnnotationFlags_Locked" value="0x0080"/>
      <item name="ePdfAnnotationFlags_ToggleNoView" value="0x0100"/>
      <item name="ePdfAnnotationFlags_LockedContents" value="0x0200"/>
      <item name="ePdfAnnotationFlags_Unknow" value="0xffff"/>
    </enumeration>
    <enumeration name="EPdfAnnotationAppearance" underlying_type="unsigned char">
      <item name="ePdfAnnotationAppearance_Normal"/>
      <item name="ePdfAnnotationAppearance_Rollover"/>
      <item name="ePdfAnnotationAppearance_Down"/>
    </enumeration>
    <class name="PdfAnnotation" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfAnnotation" implementation_class_header="PoDoFo/doc/PdfAnnotation.h" base="PoDoFo::PdfElement">
      <constructor name="Default">
        <argument name="pPage" type="PoDoFo::EPdfAnnotation"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="pPage" type="PoDoFo::PdfPage"/>
      </constructor>
      <method name="SetAppearanceStream" >
        <argument name="pObject" type="PoDoFo::PdfXObject"/>
        <argument name="eAppearance" type="PoDoFo::EPdfAnnotationAppearance"/>
        <argument name="state" type="PoDoFo::PdfName"/>
      </method>
      <method name="HasAppearanceStream" const="true" return="bool"/>
      <method name="GetRect" return="PoDoFo::GetRect" const="true"/>
      <property name="Flags" type="pdf_uint32"/>
      <!-- Name Override
            <method name="SetBorderStyle" >
                <argument name="dHCorner" type="double"/>
                <argument name="dVCorner" type="double"/>
                <argument name="dWidth" type="double"/>
            </method>
            -->
      <method name="SetBorderStyle" >
        <argument name="dHCorner" type="double"/>
        <argument name="dVCorner" type="double"/>
        <argument name="dWidth" type="double"/>
        <argument name="rStrokeStyle" type="PoDoFo::rStrokeStyle"/>
      </method>
      <property name="Title" type="PoDoFo::PdfString"/>
      <property name="Contents" type="PoDoFo::PdfString"/>
      <property name="Destination" type="PoDoFo::PdfDestination"/>
      <method name="HasDestination" const="true" return="bool"/>
      <property name="Action" type="PoDoFo::PdfAction"/>
      <method name="HasAction" const="true" return="bool"/>
      <property name="Open" type="bool"/>
      <method name="HasFileAttachement" const="true" return="bool"/>
      <property name="FileAttachement" type="PoDoFo::PdfFileSpec"/>
      <property name="QuadPoints" type="PoDoFo::PdfArray"/>
      <method name="GetColor" const="true" return="PoDoFo::PdfArray"/>
      <method name="SetColor" >
        <argument name="r" type="double"/>
        <argument name="g" type="double"/>
        <argument name="b" type="double"/>
      </method>
      <!-- Name Override
            <method name="SetColor" >
                <argument name="c" type="double"/>
                <argument name="m" type="double"/>
                <argument name="y" type="double"/>
                <argument name="k" type="double"/>
            </method>
            <method name="SetColor" >
                <argument name="gray" type="double"/>
            </method>
            <method name="SetColor" />
            -->
      <method name="GetType" return="PoDoFo::EPdfAnnotation" const="true"/>
      <method name="GetPage" return="PoDoFo::PdfPage" const="true"/>
    </class>
    <class name="PdfCMapEncoding" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfCMapEncoding" implementation_class_header="PoDoFo/doc/PdfCMapEncoding.h" base="PoDoFo::PdfEncoding">
      <enumeration name="EBaseEncoding" underlying_type="unsigned char">
        <item name="eBaseEncoding_Font"/>
        <item name="eBaseEncoding_WinAnsi"/>
        <item name="eBaseEncoding_MacRoman"/>
        <item name="eBaseEncoding_MacExpert"/>
      </enumeration>
      <constructor name="Default">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="pToUnicode" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="ConvertToUnicode" const="true" return="PoDoFo::PdfString">
        <argument name="rEncodedString" type="PoDoFo::PdfString"/>
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="AddToDictionary" const="true">
        <argument name="rDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="ConvertToEncoding" const="true" return="PoDoFo::PdfRefCountedBuffer">
        <argument name="rString" type="PoDoFo::PdfString"/>
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="IsAutoDelete" const="true" return="bool"/>
      <method name="IsSingleByteEncoding" const="true" return="bool"/>
      <method name="GetCharCode" const="true" return="pdf_utf16be">
        <argument name="nIndex" type="int"/>
      </method>
      <method name="GetID" return="PoDoFo::PdfName" const="true" />
      <method name="GetBaseEncoding" return="PoDoFo::PdfEncoding" const="true" />
    </class>
    <class name="PdfContents" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfContents" implementation_class_header="PoDoFo/doc/PdfContents.h" base="PoDoFo::PdfElement">
      <constructor name="Default">
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromObjects">
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject">
        <argument name="inObj" type="PoDoFo::PdfObject"/>
      </constructor>
      <constructor name="FromPage">
        <argument name="pParent" type="PoDoFo::PdfPage"/>
      </constructor>
      <method name="GetContest" const="true" return="PoDoFo::PdfObject"/>
      <method name="GetContentsForAppending" const="true" return="PoDoFo::PdfObject"/>
    </class>
    <enumeration name="EPdfDestinationFit" underlying_type="unsigned char">
      <item name="ePdfDestinationFit_Fit"/>
      <item name="ePdfDestinationFit_FitH"/>
      <item name="ePdfDestinationFit_FitV"/>
      <item name="ePdfDestinationFit_FitB"/>
      <item name="ePdfDestinationFit_FitBH"/>
      <item name="ePdfDestinationFit_FitBV"/>
      <item name="ePdfDestinationFit_Unknown" value="0xff"/>
    </enumeration>
    <enumeration name="EPdfDestinationType" underlying_type="unsigned char">
      <item name="ePdfDestinationType_XYZ"/>
      <item name="ePdfDestinationType_Fit"/>
      <item name="ePdfDestinationType_FitH"/>
      <item name="ePdfDestinationType_FitV"/>
      <item name="ePdfDestinationType_FitR"/>
      <item name="ePdfDestinationType_FitB"/>
      <item name="ePdfDestinationType_FitBH"/>
      <item name="ePdfDestinationType_FitBV"/>
      <item name="ePdfDestinationType_Unknown" value="0xff"/>
    </enumeration>
    <class name="PdfDestination" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDestination" implementation_class_header="PoDoFo/doc/PdfDestination.h">
      <constructor name="Default">
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="pDocument" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromVecObjects">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="PdfVecObjects" type="PoDoFo::pVecObjects"/>
      </constructor>
      <constructor name="FromPageAndDistination">
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="eFit" type="PoDoFo::EPdfDestinationFit"/>
      </constructor>
      <constructor name="FromPageAndRect">
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
      </constructor>
      <constructor name="FromPageAndDistParams">
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="dLeft" type="double"/>
        <argument name="dTop" type="double"/>
        <argument name="dZoom" type="double"/>
      </constructor>
      <constructor name="FromPageAndDistValue">
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="eFit" type="PoDoFo::EPdfDestinationFit"/>
        <argument name="dValue" type="double"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfDestination"/>
      </constructor>
      <method name="GetPage" return="PoDoFo::PdfPage" >
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </method>
      <!-- Name Override
            <method name="GetPage" return="PoDoFo::PdfPage" >
                <argument name="pVecObjects" type="PoDoFo::PdfVecObjects"/>
            </method>
            -->
      <method name="GetType" return="PoDoFo::EPdfDestinationType" const="true"/>
      <method name="GetZoom" return="double" const="true"/>
      <method name="GetRect" return="PoDoFo::PdfRect" const="true"/>
      <method name="GetTop" return="double" const="true"/>
      <method name="GetLeft" return="double" const="true"/>
      <method name="GetDValue" return="double" const="true"/>
      <method name="GetObject" return="PoDoFo::PdfRect" const="true"/>
      <method name="GetArray" return="PoDoFo::PdfArray" const="true"/>
      <method name="AddToDictionary" const="true" >
        <argument name="dictionary" type="PoDoFo::PdfDictionary"/>
      </method>
    </class>
    <class name="PdfEncodingDifference" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncodingDifference" implementation_class_header="PoDoFo/doc/PdfEncodingDifference.h">
      <constructor name="Default"/>
      <constructor name="FromOther">
        <argument name="rhs" type="PoDoFo::PdfEncodingDifference"/>
      </constructor>
      <method name="AddDifference" >
        <argument name="nCode" type="int"/>
        <argument name="unicodeValue" type="pdf_utf16be"/>
      </method>
      <method name="AddDifference" >
        <argument name="nCode" type="int"/>
        <argument name="unicodeValue" type="pdf_utf16be"/>
        <argument name="rName" type="PoDoFo::PdfName"/>
        <argument name="bExplicitNames" type="bool"/>
      </method>
      <method name="Contains" return="bool" const="true">
        <argument name="nCode" type="int"/>
        <argument name="rName" type="PoDoFo::PdfName"/>
        <argument name="rValue" type="pdf_utf16be"/>
      </method>
      <method name="AddDifference" return="bool" const="true">
        <argument name="unicodeValue" type="pdf_utf16be"/>
        <argument name="rValue" type="char"/>
      </method>
      <method name="ToArray" >
        <argument name="rArray" type="PoDoFo::PdfArray"/>
      </method>
      <method name="GetCount" return="size_t" const="true"/>
    </class>
    <class name="PdfDifferenceEncoding" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDifferenceEncoding" implementation_class_header="PoDoFo/doc/PdfDifferenceEncoding.h" base="PoDoFo::PdfEncoding">
      <enumeration name="EBaseEncoding" underlying_type="unsigned char">
        <item name="eBaseEncoding_Font"/>
        <item name="eBaseEncoding_WinAnsi"/>
        <item name="eBaseEncoding_MacRoman"/>
        <item name="eBaseEncoding_MacExpert"/>
      </enumeration>
      <constructor name="FromDocument">
        <argument name="rDifference" type="PoDoFo::PdfEncodingDifference"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="bAutoDelete" type="bool"/>
      </constructor>
      <constructor name="FromVecObjects">
        <argument name="rDifference" type="PoDoFo::PdfEncodingDifference"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="bAutoDelete" type="bool"/>
      </constructor>
      <constructor name="FromDocumentEncoding">
        <argument name="rDifference" type="PoDoFo::PdfEncodingDifference"/>
        <argument name="eBaseEncoding" type="PoDoFo::EBaseEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="bAutoDelete" type="bool"/>
      </constructor>
      <constructor name="FromVecObjectsEncoding">
        <argument name="rDifference" type="PoDoFo::PdfEncodingDifference"/>
        <argument name="eBaseEncoding" type="PoDoFo::EBaseEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="bAutoDelete" type="bool"/>
      </constructor>
      <constructor name="FromObject">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="bAutoDelete" type="bool"/>
        <argument name="bExplicitNames" type="bool"/>
      </constructor>
      <method name="NameToUnicodeID" return="pdf_utf16be">
        <argument name="rName" type="PoDoFo::PdfName"/>
      </method>
      <method name="UnicodeIDToName" return="PoDoFo::PdfName">
        <argument name="inCodePoint" type="pdf_utf16be"/>
      </method>
      <method name="AddToDictionary" const="true">
        <argument name="rDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="ConvertToUnicode" const="true"  return="PoDoFo::PdfString">
        <argument name="rEncodedString" type="PoDoFo::PdfString"/>
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="ConvertToEncoding" const="true" return="PoDoFo::PdfRefCountedBuffer">
        <argument name="rString" type="PoDoFo::PdfString"/>
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="IsAutoDelete" const="true" return="bool"/>
      <method name="IsSingleByteEncoding" const="true" return="bool"/>
      <method name="GetDifferences" const="true" return="PoDoFo::PdfEncodingDifference"/>
      <method name="GetCharCode" const="true" return="pdf_utf16be">
        <argument name="nIndex" type="int"/>
      </method>
    </class>
    <class name="PdfDocument" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfDocument" implementation_class_header="PoDoFo/doc/PdfDocument.h">
      <method name="GetWriteMode" const="true" return="PoDoFo::PdfDocument"/>
      <method name="GetPdfVersion" const="true" return="PoDoFo::EPdfVersion"/>
      <method name="IsLinearized" const="true" return="bool"/>
      <method name="GetInfo" const="true" return="PoDoFo::PdfInfo"/>
      <method name="GetOutlines" return="PoDoFo::PdfOutlines">
        <argument name="bCreate" type="bool"/>
      </method>
      <method name="GetNamesTree" return="PoDoFo::PdfNamesTree">
        <argument name="bCreate" type="bool"/>
      </method>
      <method name="PdfAcroForm" return="PoDoFo::PdfNamesTree">
        <argument name="bCreate" type="bool"/>
        <argument name="eDefaultAppearance" type="PoDoFo::EPdfAcroFormDefaulAppearance"/>
      </method>
      <method name="GetPagesTree" const="true" return="PoDoFo::PdfPagesTree"/>
      <method name="GetPageCount" const="true" return="int"/>
      <method name="GetPage" return="PoDoFo::PdfPage" const="true">
        <argument name="nIndex" type="int"/>
      </method>
      <method name="CreateFont" return="PoDoFo::PdfFont">
        <argument name="pszFontName" type="const char*"/>
        <argument name="bSymbolCharset" type="bool"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="eFontCreationFlags" type="PoDoFo::PdfFontCache::EFontCreationFlags"/>
        <argument name="bEmbedd" type="bool"/>
      </method>
      <!-- Name Override
            <method name="CreateFont" return="PoDoFo::PdfFont">
                <argument name="pszFontName" type="const char*"/>
                <argument name="bBold" type="bool"/>
                <argument name="bItalic" type="bool"/>
                <argument name="bSymbolCharset" type="bool"/>
                <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
                <argument name="eFontCreationFlags" type="PoDoFo::PdfFontCache::EFontCreationFlags"/>
                <argument name="bEmbedd" type="bool"/>
                <argument name="pszFileName" type="const char*"/>
            </method>
            <method name="CreateFont" return="PoDoFo::PdfFont">
                <argument name="face" type="PoDoFo::FT_Face"/>
                <argument name="bSymbolCharset" type="bool"/>
                <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
                <argument name="bEmbedd" type="bool"/>
            </method>
            -->
      <method name="CreateDuplicateFontType1" return="PoDoFo::PdfFont">
        <argument name="pFont" type="v"/>
        <argument name="pszSuffix" type="const char*"/>
      </method>
      <method name="CreateFontSubset" return="PoDoFo::PdfFont">
        <argument name="pszFontName" type="const char*"/>
        <argument name="bBold" type="bool"/>
        <argument name="bItalic" type="bool"/>
        <argument name="bSymbolCharset" type="bool"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pszFileName" type="const char*"/>
      </method>
      <method name="GetFontLibrary" const="true" return="PoDoFo::FT_Library"/>
      <method name="EmbedSubsetFonts"/>
      <method name="CreatePage" return="PoDoFo::PdfPage" >
        <argument name="rSize" type="PoDoFo::PdfRect"/>
      </method>
      <method name="CreatePages" >
        <argument name="vecSizes" type="const std::vector&lt;PoDoFo::PdfRect&gt;&amp;"/>
      </method>
      <method name="InsertPage" >
        <argument name="rSize" type="PoDoFo::PdfRect"/>
        <argument name="atIndex" type="int"/>
      </method>
      <method name="Append" return="PoDoFo::PdfDocument" >
        <argument name="rDoc" type="PoDoFo::PdfMemDocument"/>
        <argument name="bAppendAll" type="bool"/>
      </method>
      <method name="InsertExistingPageAt" return="PoDoFo::PdfDocument" >
        <argument name="rDoc" type="PoDoFo::PdfMemDocument"/>
        <argument name="nPageIndex" type="int"/>
        <argument name="nAtIndex" type="int"/>
      </method>
      <method name="FillXObjectFromDocumentPage" return="PoDoFo::PdfRect" >
        <argument name="pXObj" type="PoDoFo::PdfXObject"/>
        <argument name="rDoc" type="PoDoFo::PdfMemDocument"/>
        <argument name="nPage" type="int"/>
        <argument name="bUseTrimBox" type="bool"/>
      </method>
      <method name="FillXObjectFromExistingPage" return="PoDoFo::PdfRect" >
        <argument name="pXObj" type="PoDoFo::PdfXObject"/>
        <argument name="nPage" type="int"/>
        <argument name="bUseTrimBox" type="bool"/>
      </method>
      <method name="FillXObjectFromPage" return="PoDoFo::PdfRect" >
        <argument name="pXObj" type="PoDoFo::PdfXObject"/>
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="bUseTrimBox" type="bool"/>
        <argument name="difference" type="unsigned int"/>
      </method>
      <method name="AttachedFile" >
        <argument name="rFileSpec" type="PdfFileSpec"/>
      </method>
      <method name="GetAttachment" return="PoDoFo::PdfFileSpec" >
        <argument name="rName" type="PoDoFo::PdfString"/>
      </method>
      <method name="AddNamedDestination">
        <argument name="rDest" type="PoDoFo::PdfDestination"/>
        <argument name="rsName" type="PoDoFo::PdfString"/>
      </method>
      <property name="PageMode" type="PoDoFo::EPdfPageMode"/>
      <method name="SetUseFullScreen" />
      <method name="SetUseFullScreen" >
        <argument name="inLayout" type="PoDoFo::EPdfPageLayout"/>
      </method>
      <method name="SetHideToolbar" />
      <method name="SetHideMenubar" />
      <method name="SetHideWindowUI" />
      <method name="SetFitWindow" />
      <method name="SetCenterWindow" />
      <method name="SetDisplayDocTitle" />
      <method name="SetPrintScaling" >
        <argument name="inScalingType" type="PoDoFo::PdfName"/>
      </method>
      <method name="SetBaseURI" >
        <argument name="inBaseURI" type="const char*"/>
      </method>
      <method name="SetLanguage" >
        <argument name="inLanguage" type="const char*"/>
      </method>
      <method name="SetBindingDirection" >
        <argument name="inDirection" type="PoDoFo::PdfName"/>
      </method>
      <method name="IsPrintAllowed" const="true" return="bool"/>
      <method name="IsEditAllowed" const="true" return="bool"/>
      <method name="IsCopyAllowed" const="true" return="bool"/>
      <method name="IsEditNotesAllowed" const="true" return="bool"/>
      <method name="IsFillAndSignAllowed" const="true" return="bool"/>
      <method name="IsAccessibilityAllowed" const="true" return="bool"/>
      <method name="IsDocAssemblyAllowed" const="true" return="bool"/>
      <method name="IsHighPrintAllowed" const="true" return="bool"/>
      <method name="GetObjects" const="true" return="PoDoFo::PdfVecObjects" />
      <method name="SetFontConfigWrapper">
        <argument name="rFontConfig" type="PoDoFo::PdfFontConfigWrapper"/>
      </method>
    </class>
    <class name="PdfElement" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfElement" implementation_class_header="PoDoFo/doc/PdfElement.h">
      <method name="GetObject" return="PoDoFo::PdfObject" const="true"/>
    </class>
    <class name="PdfEncodingObjectFactory" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfEncodingObjectFactory" implementation_class_header="PoDoFo/doc/PdfEncodingObjectFactory.h">
      <method name="GetObject" return="PoDoFo::PdfEncoding">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="pToUnicode" type="PoDoFo::PdfObject"/>
        <argument name="bExplicitNames" type="bool"/>
      </method>
    </class>
    <class name="PdfExtGState" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfExtGState" implementation_class_header="PoDoFo/doc/PdfExtGState.h" base="PdfElement">
      <constructor name="FromVecObjects" >
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument" >
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
      <method name="GetIdentifier" const="true" return="PoDoFo::PdfName"/>
      <method name="SetFillOpacity">
        <argument name="opac" type="double" />
      </method>
      <method name="SetFillOpacity">
        <argument name="opac" type="double" />
      </method>
      <method name="SetStrokeOpacity">
        <argument name="opac" type="double" />
      </method>
      <method name="SetBlendMode">
        <argument name="blendMode" type="const char*" />
      </method>
      <method name="SetOverprint">
        <argument name="enable" type="bool" />
      </method>
      <method name="SetFillOverprint">
        <argument name="enable" type="bool" />
      </method>
      <method name="SetStrokeOverprint">
        <argument name="enable" type="bool" />
      </method>
      <method name="SetNonZeroOverprint">
        <argument name="enable" type="bool" />
      </method>
      <method name="SetRenderingIntent">
        <argument name="intent" type="const char*" />
      </method>
      <method name="SetFrequency">
        <argument name="frequency" type="double" />
      </method>
    </class>
    <enumeration name="EPdfField" underlying_type="unsigned char">
      <item name="ePdfField_PushButton"/>
      <item name="ePdfField_CheckBox"/>
      <item name="ePdfField_RadioButton"/>
      <item name="ePdfField_TextField"/>
      <item name="ePdfField_ComboBox"/>
      <item name="ePdfField_ListBox"/>
      <item name="ePdfField_Signature"/>
      <item name="ePdfField_Unknown" value="0xff"/>
    </enumeration>
    <enumeration name="EPdfHighlightingMode" underlying_type="unsigned char">
      <item name="ePdfHighlightingMode_None"/>
      <item name="ePdfHighlightingMode_Invert"/>
      <item name="ePdfHighlightingMode_InvertOutline"/>
      <item name="ePdfHighlightingMode_Push"/>
      <item name="ePdfField_Unknown" value="0xff"/>
    </enumeration>
    <class name="PdfField" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfField" implementation_class_header="PoDoFo/doc/PdfField.h" >
      <constructor name="FromObject" >
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
      </constructor>
      <constructor name="FromOther" >
        <argument name="rhs" type="PoDoFo::PdfField"/>
      </constructor>
      <method name="GetPage" return="PoDoFo::PdfPage" const="true"/>
      <method name="SetHighlightingMode" >
        <argument name="eMode" type="PoDoFo::EPdfHighlightingMode"/>
      </method>
      <method name="SetBorderColorTransparent" />

      <method name="SetBorderColor" >
        <argument name="dRed" type="double"/>
        <argument name="dGreen" type="double"/>
        <argument name="dBlue" type="double"/>
      </method>
      <!-- Name Override
            <method name="SetBorderColor" >
                <argument name="dGray" type="double"/>
            </method>
            <method name="SetBorderColor" >
                <argument name="dCyan" type="double"/>
                <argument name="dMagenta" type="double"/>
                <argument name="dYellow" type="double"/>
                <argument name="dBlack" type="double"/>
            </method>
            -->
      <method name="SetBackgroundColorTransparent" />
      <method name="SetBackgroundColor" >
        <argument name="dRed" type="double"/>
        <argument name="dGreen" type="double"/>
        <argument name="dBlue" type="double"/>
      </method>
      <!-- Name Override
            <method name="SetBackgroundColor" >
                <argument name="dGray" type="double"/>
            </method>
            <method name="SetBackgroundColor" >
                <argument name="dCyan" type="double"/>
                <argument name="dMagenta" type="double"/>
                <argument name="dYellow" type="double"/>
                <argument name="dBlack" type="double"/>
            </method>
            -->
      <property name="FileName" type="PoDoFo::PdfString"/>
      <property name="AlternateName" type="PoDoFo::PdfString"/>
      <property name="MappingName" type="PoDoFo::PdfString"/>
      <method name="SetReadOnly" >
        <argument name="bReadOnly" type="bool"/>
      </method>
      <method name="IsReadOnly" const="true" return="bool"/>
      <method name="SetRequired" >
        <argument name="bRequired" type="bool"/>
      </method>
      <method name="IsRequired" const="true" return="bool"/>
      <method name="SetExport" >
        <argument name="bExport" type="bool"/>
      </method>
      <method name="IsExport" const="true" return="bool"/>
      <method name="SetMouseEnterAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetMouseLeaveAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetMouseDownAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetMouseUpAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetFocusEnterAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetFocusLeaveAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetPageOpenAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetPageCloseAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetPageVisibleAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetPageInvisibleAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetKeystrokeAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="SetValidateAction" >
        <argument name="rAction" type="PoDoFo::PdfAction"/>
      </method>
      <method name="GetType" const="true" return="PoDoFo::EPdfField"/>
      <method name="GetWidgetAnnotation" const="true" return="PoDoFo::PdfAnnotation"/>
      <method name="GetWidgetAnnotation" const="true" return="PoDoFo::PdfObject"/>
    </class>
    <class name="PdfButton" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfButton" implementation_class_header="PoDoFo/doc/PdfField.h" base="PoDoFo::PdfField">
      <constructor name="FromField" >
        <argument name="rhs" type="PoDoFo::PdfField"/>
      </constructor>
      <method name="IsPushButton" return="bool" const="true"/>
      <method name="IsCheckBox" return="bool" const="true"/>
      <method name="IsRadioButton" return="bool" const="true"/>
      <property name="Caption" type="PoDoFo::PdfString"/>
    </class>
    <class name="PdfPushButton" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfPushButton" implementation_class_header="PoDoFo/doc/PdfField.h" base="PoDoFo::PdfButton">
      <constructor name="FromWidget" >
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromForm" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromStreamDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfStreamedDocument"/>
      </constructor>
      <constructor name="FromPage" >
        <argument name="pPage" type="PoDoFo::PdfField"/>
      </constructor>
      <property name="RolloverCaption" type="PoDoFo::PdfString"/>
      <property name="AlternateCaption" type="PoDoFo::PdfString"/>
    </class>
    <class name="PdfCheckBox" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfCheckBox" implementation_class_header="PoDoFo/doc/PdfField.h" base="PoDoFo::PdfButton">
      <constructor name="FromWidget" >
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromForm" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromStreamDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfStreamedDocument"/>
      </constructor>
      <constructor name="FromPage" >
        <argument name="pPage" type="PoDoFo::PdfField"/>
      </constructor>
      <method name="SetAppearanceChecked" >
        <argument name="rXObject" type="PoDoFo::PdfXObject"/>
      </method>
      <method name="SetAppearanceUnchecked" >
        <argument name="rXObject" type="PoDoFo::PdfXObject"/>
      </method>
      <method name="SetChecked" >
        <argument name="bChecked" type="bool"/>
      </method>
      <method name="IsCheked" return="bool"/>
    </class>
    <class name="PdfTextField" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfTextField" implementation_class_header="PoDoFo/doc/PdfField.h" base="PoDoFo::PdfField">
      <constructor name="FromWidget" >
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromForm" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromStreamDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfStreamedDocument"/>
      </constructor>
      <constructor name="FromField" >
        <argument name="rhs" type="PoDoFo::PdfField"/>
      </constructor>
      <constructor name="FromOther" >
        <argument name="rsText" type="PoDoFo::PdfString"/>
      </constructor>
      <property name="Text" type="PoDoFo::PdfString"/>
      <property name="MaxLen" type="pdf_long"/>
      <method name="SetMultiline" >
        <argument name="bMultiLine" type="bool"/>
      </method>
      <method name="IsMultiLine" return="bool" const="true"/>
      <method name="SetPassword" >
        <argument name="bPasswordField" type="bool"/>
      </method>
      <method name="IsPasswordField" return="bool" const="true"/>
      <method name="SetSpellchecking" >
        <argument name="bSpellchecking" type="bool"/>
      </method>
      <method name="IsSpellcheckingEnabled" return="bool" const="true"/>
      <method name="SetFile" >
        <argument name="bFileField" type="bool"/>
      </method>
      <method name="IsFileField" return="bool" const="true"/>

      <method name="SetScrollBarsEnabled" >
        <argument name="bScroll" type="bool"/>
      </method>
      <method name="IsScrollBarsEnabled" return="bool" const="true"/>
      <method name="SetCombs" >
        <argument name="bCombs" type="bool"/>
      </method>
      <method name="IsCombs" return="bool" const="true"/>
      <method name="SetRichText" >
        <argument name="bRichText" type="bool"/>
      </method>
      <method name="IsRichText" return="bool" const="true"/>
    </class>
    <class name="PdfListField" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfListField" implementation_class_header="PoDoFo/doc/PdfField.h" base="PoDoFo::PdfField">
      <constructor name="FromField" >
        <argument name="rhs" type="PoDoFo::PdfField"/>
      </constructor>
      <method name="InsertItem" >
        <argument name="rsValue" type="PoDoFo::PdfString"/>
        <argument name="rsDisplayName" type="PoDoFo::PdfString"/>
      </method>
      <method name="RemoveItem" >
        <argument name="nIndex" type="int"/>
      </method>
      <method name="GetItem" return="PoDoFo::PdfString" const="true">
        <argument name="nIndex" type="int"/>
      </method>
      <method name="GetItemDisplayText" return="PoDoFo::PdfString" const="true">
        <argument name="nIndex" type="int"/>
      </method>
      <method name="GetItemCount" return="size_t" const="true"/>
      <property name="SelectedItem" type="int"/>
      <method name="IsComboBox" const="true" return="bool"/>
      <method name="SetSpellcheckingEnabled">
        <argument name="bSpellcheck" type="bool"/>
      </method>
      <method name="IsSpellcheckingEnabled" const="true" return="bool"/>
      <method name="SetSorted">
        <argument name="bSorted" type="bool"/>
      </method>
      <method name="IsSorted" const="true" return="bool"/>
      <method name="SetMultiSelect">
        <argument name="bMulti" type="bool"/>
      </method>
      <method name="IsMultiSelect" const="true" return="bool"/>
      <method name="SetCommitOnSelectionChange">
        <argument name="bCommit" type="bool"/>
      </method>
      <method name="IsCommitOnSelectionChange" const="true" return="bool"/>
    </class>
    <class name="PdfComboBox" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfComboBox" implementation_class_header="PoDoFo/doc/PdfField.h" base="PoDoFo::PdfListField">
      <constructor name="FromWidget" >
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromForm" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromStreamDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfStreamedDocument"/>
      </constructor>
      <constructor name="FromField" >
        <argument name="rhs" type="PoDoFo::PdfField"/>
      </constructor>
      <method name="SetEditable" >
        <argument name="bEdit" type="bool"/>
      </method>
      <method name="IsEditable" return="bool" const="true"/>
    </class>
    <class name="PdfListBox" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfListBox" implementation_class_header="PoDoFo/doc/PdfField.h" base="PoDoFo::PdfListField">
      <constructor name="FromWidget" >
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromForm" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfAcroForm"/>
      </constructor>
      <constructor name="FromDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromStreamDoc" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfStreamedDocument"/>
      </constructor>
      <constructor name="FromField" >
        <argument name="rhs" type="PoDoFo::PdfField"/>
      </constructor>
    </class>
    <class name="PdfFileSpec" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFileSpec" implementation_class_header="PoDoFo/doc/PdfFileSpec.h" base="PoDoFo::PdfElement">
      <constructor name="FromDocument" >
        <argument name="pszFilename" type="const char*"/>
        <argument name="bEmbedd" type="bool"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="bStripPath" type="bool"/>
      </constructor>
      <constructor name="FromVecObjects" >
        <argument name="pszFilename" type="const char*"/>
        <argument name="bEmbedd" type="bool"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="bStripPath" type="bool"/>
      </constructor>
      <constructor name="FromBufferAndDocument" >
        <argument name="pszFilename" type="const char*"/>
        <argument name="data" type="const unsigned char*"/>
        <argument name="size" type="ptrdiff_t"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="bStripPath" type="bool"/>
      </constructor>
      <constructor name="FromBufferAndVecObjects" >
        <argument name="pszFilename" type="const char*"/>
        <argument name="data" type="const unsigned char*"/>
        <argument name="size" type="ptrdiff_t"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="bStripPath" type="bool"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="GetFilename" const="true" return="PoDoFo::PdfString">
        <argument name="canUnicode" type="bool"/>
      </method>
    </class>
    <class name="PdfFont" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFont" implementation_class_header="PoDoFo/doc/PdfFont.h" base="PoDoFo::PdfElement">
      <constructor name="FromVecObjects" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <property name="FontSize" type="float"/>
      <property name="FontScale" type="float"/>
      <property name="CharSpace" type="float"/>
      <property name="WordSpace" type="float"/>
      <property name="Underlined" type="bool"/>
      <method name="IsUnderlined" return="bool" const="true"/>
      <method name="IsBold" return="bool" const="true"/>
      <method name="IsItalic" return="bool" const="true"/>
      <method name="SetStrikeOut" >
        <argument name="bStrikeOut" type="bool"/>
      </method>
      <method name="IsStrikeOut" return="bool" const="true"/>
      <method name="GetIdentifier" return="PoDoFo::PdfName" const="true"/>
      <method name="GetEncoding" return="PoDoFo::PdfEncoding" const="true"/>
      <method name="GetFontMetrics" return="PoDoFo::PdfFontMetrics" const="true"/>
      <method name="GetFontMetrics2" return="PoDoFo::PdfFontMetrics" const="true"/>
      <method name="WriteStringToStream">
        <argument name="rsString" type="PoDoFo::PdfString"/>
        <argument name="pStream" type="PoDoFo::PdfStream"/>
      </method>
      <method name="EmbedFont"/>
      <method name="AddUsedSubsettingGlyphs">
        <argument name="sText" type="PoDoFo::PdfString"/>
        <argument name="lStringLen" type="long"/>
      </method>
      <method name="WriteStringToStream">
        <argument name="pszGlyphName" type="const char *"/>
      </method>
      <method name="EmbedSubsetFont"/>
      <method name="IsSubsetting" return="bool" const="true"/>
    </class>
    <class name="PdfFontCache" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontCache" implementation_class_header="PoDoFo/doc/PdfFontCache.h">
      <enumeration name="EFontCreationFlags" underlying_type="unsigned char">
        <item name="eFontCreationFlags_None" />
        <item name="eFontCreationFlags_AutoSelectBase14" />
        <item name="eFontCreationFlags_Type1Subsetting" />
      </enumeration>
      <constructor name="Default" >
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromConfig" >
        <argument name="rFontConfig" type="PoDoFo::PdfFontConfigWrapper"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="EmptyCache"/>
      <method name="GetFont" return="PoDoFo::PdfFont">
        <argument name="pObject" type="PdfObject"/>
      </method>
      <!--
            <method name="GetFont" type="PoDoFo::PdfFont">
                <argument name="pszFontName" type="const char*"/>
                <argument name="bBold" type="bool"/>
                <argument name="bItalic" type="bool"/>
                <argument name="bSymbolCharset" type="bool"/>
                <argument name="bEmbedd" type="bool"/>
                <argument name="" type="PoDoFo::PdfEncoding"/>
                <argument name="eFontCreationFlags" type="PoDoFo::EFontCreationFlags"/>
                <argument name="pszFileName" type="const char*"/>
            </method>
            <method name="GetFont" type="PoDoFo::PdfFont">
                <argument name="face" type="PoDoFo::FT_Face"/>
                <argument name="bSymbolCharset" type="bool"/>
                <argument name="bEmbedd" type="bool"/>
                <argument name="" type="PoDoFo::PdfEncoding"/>
            </method>
            -->
      <method name="GetDuplicateFontType1" return="PoDoFo::PdfFont" >
        <argument name="pFont" type="PoDoFo::PdfFont"/>
        <argument name="pszSuffix" type="const char*"/>
      </method>
      <method name="GetFontSubset" return="PoDoFo::PdfFont" >
        <argument name="pszFontName" type="const char*"/>
        <argument name="bBold" type="bool"/>
        <argument name="bItalic" type="bool"/>
        <argument name="bSymbolCharset" type="bool"/>
        <argument name="" type="PoDoFo::PdfEncoding"/>
        <argument name="pszFileName" type="const char*"/>
      </method>
      <method name="EmbedSubsetFonts"/>
      <method name="GetFontConfigFontPath" return="const char*" >
        <argument name="pConfig" type="PoDoFo::FcConfig"/>
        <argument name="pszFontName" type="const char*"/>
        <argument name="bBold" type="bool"/>
        <argument name="bItalic" type="bool"/>
      </method>
      <method name="GetFontLibrary" return="PoDoFo::FT_Library" const="true"/>
      <method name="SetFontConfigWrapper">
        <argument name="rFontConfig" type="PoDoFo::PdfFontConfigWrapper"/>
      </method>
    </class>
    <class name="PdfFontCID" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontCID" implementation_class_header="PoDoFo/doc/PdfFontCID.h" base="PoDoFo::PdfFont">
      <constructor name="FromVecObjects" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="bEmbed" type="bool"/>
        <argument name="bSubset" type="bool"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="bEmbed" type="bool"/>
      </constructor>
      <method name="EmbedFont"/>
      <method name="EmbedSubsetFont"/>
      <method name="AddUsedSubsettingGlyphs">
        <argument name="sText" type="PoDoFo::PdfString"/>
        <argument name="lStringLen" type="bool"/>
      </method>
    </class>
    <class name="PdfFontConfigWrapper" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontConfigWrapper" implementation_class_header="PoDoFo/doc/PdfFontConfigWrapper.h">
      <constructor name="Default"/>
      <constructor name="FromOther" >
        <argument name="rhs" type="PoDoFo::PdfFontConfigWrapper"/>
      </constructor>
      <method name="GetFontConfig" return="void*"/>
      <method name="GetFontConfigMutex" return="PoDOFo::Util::PdfMutex"/>
    </class>
    <class name="PdfFontFactory" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontFactory" implementation_class_header="PoDoFo/doc/PdfFontFactory.h">
      <method name="CreateFontObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </method>
      <method name="CreateFont" >
        <argument name="pLibrary" type="PoDoFo::FT_Library"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </method>
      <method name="CreateBase14Font" >
        <argument name="pszFontName" type="const char*"/>
        <argument name="eFlags" type="PoDoFo::EPdfFontFlags"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </method>
      <method name="GetFontType" return="PoDoFo::EPdfFontType">
        <argument name="pszFilename" type="const char*"/>
      </method>
    </class>
    <class name="PdfFontMetrics" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontMetrics" implementation_class_header="PoDoFo/doc/PdfFontMetrics.h">
      <method name="GetWidthArray" const="true">
        <argument name="var" type="PoDoFo::PdfVariant"/>
        <argument name="nFirst" type="unsigned int"/>
        <argument name="nLast" type="unsigned int "/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
      </method>
      <method name="GetGlyphWidth" return="double" const="true">
        <argument name="nGlyphId" type="int" />
      </method>
      <!-- Name Override
            <method name="GetGlyphWidth" return="double" const="true">
                <argument name="pszGlyphname" type="const char*" />
            </method>
            -->
      <method name="GetBoundingBox" const="true">
        <argument name="array" type="PoDoFo::PdfArray" />
      </method>
      <method name="StringWidth" const="true" return="double">
        <argument name="rsString" type="PoDoFo::PdfString"/>
      </method>
      <!-- Name Override
            <method name="StringWidth" const="true" return="double">
                <argument name="pszText" type="const char*"/>
                <argument name="nLength" type="pdf_long"/>
            </method>
            <method name="StringWidth" const="true" return="double">
                <argument name="pszText" type="pdf_utf16be*"/>
                <argument name="nLength" type="unsigned int"/>
            </method>
            <method name="StringWidth" const="true" return="double">
                <argument name="pszText" type="const wchar_t*"/>
                <argument name="nLength" type="unsigned int"/>
            </method>
            -->
      <method name="StringWidth" const="true" return="double">
        <argument name="pszText" type="const char*"/>
        <argument name="nLength" type="unsigned int"/>
      </method>
      <!-- Name Override
            <method name="StringWidth" const="true" return="double">
                <argument name="pszText" type="pdf_utf16be*"/>
                <argument name="nLength" type="unsigned int"/>
            </method>
            <method name="StringWidth" const="true" return="double">
                <argument name="pszText" type="const wchar_t*"/>
                <argument name="nLength" type="unsigned int"/>
            </method>
            -->
      <method name="CharWidth" const="true" return="double">
        <argument name="c" type="unsigned char "/>
      </method>
      <method name="UnicodeCharWidth" const="true" return="double">
        <argument name="c" type="unsigned char "/>
      </method>
      <method name="CharWidthMM" const="true" return="unsigned long">
        <argument name="c" type="unsigned char "/>
      </method>
      <method name="GetLineSpacing" const="true" return="double"/>
      <method name="GetLineSpacingMM" const="true" return="unsigned long"/>
      <method name="GetUnderlineThickness" const="true" return="unsigned long"/>
      <method name="GetLineSpacing" const="true" return="double"/>
      <method name="GetLineSpacingMM" const="true" return="double"/>
      <method name="GetUnderlineThickness" const="true" return="double"/>
      <method name="GetUnderlinePosition" const="true" return="double"/>
      <method name="GetUnderlinePositionMM" const="true" return="long"/>
      <method name="GetStrikeOutPosition" const="true" return="double"/>
      <method name="GetStrikeOutPositionMM" const="true" return="unsigned long"/>
      <method name="GetStrikeoutThickness" const="true" return="double"/>
      <method name="GetStrikeoutThicknessMM" const="true" return="unsigned long"/>
      <method name="GetFilename" const="true" return="const char*"/>
      <method name="GetFontData" const="true" return="const char*"/>
      <method name="GetFontDataLen" const="true" return="pdf_long"/>
      <method name="GetFontname" const="true" return="const char*"/>
      <method name="GetSubsetFontnamePrefix" const="true" return="const char*"/>
      <method name="GetWeight" const="true" return="unsigned int"/>
      <method name="GetAscent" const="true" return="double"/>
      <method name="GetPdfAscent" const="true" return="double"/>
      <method name="GetDescent" const="true" return="double"/>
      <method name="GetPdfDescent" const="true" return="double"/>
      <method name="GetItalicAngle" const="true" return="int"/>
      <property name="FontSize" type="float"/>
      <property name="FontScale" type="float"/>
      <property name="FontCharSpace" type="float"/>
      <property name="WordSpace" type="float"/>
      <method name="GetFontType" return="PoDoFo::EPdfFontType" const="true"/>
      <method name="GetGlyphId" const="true" return="long">
        <argument name="lUnicode" type="long"/>
      </method>
      <method name="IsSymbol" return="bool" const="true"/>
      <method name="FontTypeFromFilename" return="PoDoFo::EPdfFontType" >
        <argument name="pszFilename" type="const char*"/>
      </method>
    </class>
    <class name="PdfFontMetricsBase14" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontMetricsBase14" implementation_class_header="PoDoFo/doc/PdfFontMetricsBase14.h" base="PoDoFo::PdfFontMetrics">
      <constructor name="Default" >
        <argument name="mfont_name" type="const char*"/>
        <argument name="mwidths_table" type="PoDoFo::PODOFO_CharData"/>
        <argument name="mis_font_specific" type="bool"/>
        <argument name="mascent" type="pdf_int16"/>
        <argument name="mdescent" type="pdf_int16"/>
        <argument name="mx_height" type="pdf_int16"/>
        <argument name="mcap_height" type="pdf_int16"/>
        <argument name="mbbox" type="PoDoFo::PdfRect"/>
      </constructor>
      <method name="GetWidthArray" const="true">
        <argument name="var" type="PoDoFo::PdfVariant" />
        <argument name="nFirst" type="unsigned int" />
        <argument name="nLast" type="unsigned int" />
        <argument name="pEncoding" type="PoDoFo::PdfEncoding" />
      </method>
      <method name="GetGlyphWidth" const="true" return="double">
        <argument name="nGlyphId" type="int" />
      </method>
      <!--
            <method name="GetGlyphWidth" const="true" return="double">
                <argument name="pszGlyphname" type="const char*" />
            </method>
            -->
      <method name="GetBoundingBox" const="true">
        <argument name="array" type="PoDoFo::PdfArray" />
      </method>
      <method name="CharWidth" const="true" return="double">
        <argument name="c" type="unsigned char" />
      </method>
      <method name="UnicodeCharWidth" const="true" return="double">
        <argument name="c" type="unsigned char" />
      </method>
      <method name="GetLineSpacing" const="true" return="double"/>
      <method name="GetUnderlineThickness" const="true" return="double"/>
      <method name="GetUnderlinePosition" const="true" return="double"/>
      <method name="GetStrikeOutPosition" const="true" return="double"/>
      <method name="GetStrikeoutThickness" const="true" return="double"/>
      <method name="GetFontname" const="true" return="const char*"/>
      <method name="GetWeight" const="true" return="unsigned int"/>
      <method name="GetAscent" const="true" return="double"/>
      <method name="GetPdfAscent" const="true" return="double"/>
      <method name="GetDescent" const="true" return="double"/>
      <method name="GetPdfDescent" const="true" return="double"/>
      <method name="GetItalicAngle" const="true" return="int"/>
      <method name="GetGlyphId" const="true" return="long">
        <argument name="lUnicode" type="long"/>
      </method>
      <method name="IsSymbol" const="true" return="bool"/>
      <method name="GetFontData" const="true" return="consy char*"/>
      <method name="GetFontDataLen" const="true" return="pdf_long"/>
      <method name="GetCapHeight" const="true" return="double"/>
      <method name="GetGlyphIdUnicode" const="true" return="long">
        <argument name="lUnicode" type="long"/>
      </method>
    </class>
    <class name="PdfFontMetricsFreetype" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontMetricsFreetype" implementation_class_header="PoDoFo/doc/PdfFontMetricsFreetype.h" base="PoDoFo::PdfFontMetrics">
      <constructor name="FromFile" >
        <argument name="pLibrary" type="PoDoFo::FT_Library"/>
        <argument name="pszFilename" type="const char*"/>
        <argument name="pIsSymbol" type="bool"/>
        <argument name="pszSubsetPrefix" type="const char*"/>
      </constructor>
      <constructor name="FromBuffer" >
        <argument name="pLibrary" type="PoDoFo::FT_Library"/>
        <argument name="pBuffer" type="const char*"/>
        <argument name="nBufLen" type="unsigned int"/>
        <argument name="pIsSymbol" type="bool"/>
        <argument name="pszSubsetPrefix" type="const char*"/>
      </constructor>
      <constructor name="FromRefCountedBuffer" >
        <argument name="pLibrary" type="PoDoFo::FT_Library"/>
        <argument name="rBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
        <argument name="pIsSymbol" type="bool"/>
        <argument name="pszSubsetPrefix" type="const char*"/>
      </constructor>
      <constructor name="FromRefCountedBuffer" >
        <argument name="pLibrary" type="PoDoFo::FT_Library"/>
        <argument name="face" type="PoDoFo::FT_Face"/>
        <argument name="pIsSymbol" type="bool"/>
        <argument name="pszSubsetPrefix" type="const char*"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pLibrary" type="PoDoFo::FT_Library"/>
        <argument name="pDescriptor" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="CreateForSubsetting" return="PdfFontMetricsFreetype">
        <argument name="pLibrary" type="PoDoFo::FT_Library"/>
        <argument name="pszFilename" type="const char*"/>
        <argument name="pIsSymbol" type="bool"/>
        <argument name="pszSubsetPrefix" type="const char*"/>
      </method>
      <method name="GetWidthArray" const="true">
        <argument name="var" type="PoDoFo::PdfVariant" />
        <argument name="nFirst" type="unsigned int" />
        <argument name="nLast" type="unsigned int" />
        <argument name="pEncoding" type="PoDoFo::PdfEncoding" />
      </method>
      <method name="GetGlyphWidth" const="true" return="double">
        <argument name="nGlyphId" type="int" />
      </method>
      <!--
            <method name="GetGlyphWidth" const="true" return="double">
                <argument name="pszGlyphname" type="const char*" />
            </method>
            -->
      <method name="GetBoundingBox" const="true">
        <argument name="array" type="PoDoFo::PdfArray" />
      </method>
      <method name="CharWidth" const="true" return="double">
        <argument name="c" type="unsigned char" />
      </method>
      <method name="UnicodeCharWidth" const="true" return="double">
        <argument name="c" type="unsigned char" />
      </method>
      <method name="GetLineSpacing" const="true" return="double"/>
      <method name="GetUnderlineThickness" const="true" return="double"/>
      <method name="GetUnderlinePosition" const="true" return="double"/>
      <method name="GetStrikeOutPosition" const="true" return="double"/>
      <method name="GetStrikeoutThickness" const="true" return="double"/>
      <method name="GetFontname" const="true" return="const char*"/>
      <method name="GetWeight" const="true" return="unsigned int"/>
      <method name="GetAscent" const="true" return="double"/>
      <method name="GetPdfAscent" const="true" return="double"/>
      <method name="GetDescent" const="true" return="double"/>
      <method name="GetPdfDescent" const="true" return="double"/>
      <method name="GetItalicAngle" const="true" return="int"/>
      <method name="GetGlyphId" const="true" return="long">
        <argument name="lUnicode" type="long"/>
      </method>
      <method name="IsSymbol" const="true" return="bool"/>
      <method name="GetFontData" const="true" return="consy char*"/>
      <method name="GetFontDataLen" const="true" return="pdf_long"/>
      <method name="IsBold" return="bool" const="true"/>
      <method name="IsItalic" return="bool" const="true"/>
      <method name="GetFace" return="PoDoFo::FT_Face" />
    </class>
    <class name="PdfFontMetricsObject" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontMetricsObject" implementation_class_header="PoDoFo/doc/PdfFontMetricsObject.h" base="PoDoFo::PdfFontMetrics">
      <constructor name="Default" >
        <argument name="pFont" type="PoDoFo::PdfObject"/>
        <argument name="pDescriptor" type="PoDoFo::PdfObject"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
      </constructor>
      <method name="GetWidthArray" const="true">
        <argument name="var" type="PoDoFo::PdfVariant" />
        <argument name="nFirst" type="unsigned int" />
        <argument name="nLast" type="unsigned int" />
        <argument name="pEncoding" type="PoDoFo::PdfEncoding" />
      </method>
      <method name="GetGlyphWidth" const="true" return="double">
        <argument name="nGlyphId" type="int" />
      </method>
      <!--
            <method name="GetGlyphWidth" const="true" return="double">
                <argument name="pszGlyphname" type="const char*" />
            </method>
            -->
      <method name="GetBoundingBox" const="true">
        <argument name="array" type="PoDoFo::PdfArray" />
      </method>
      <method name="CharWidth" const="true" return="double">
        <argument name="c" type="unsigned char" />
      </method>
      <method name="UnicodeCharWidth" const="true" return="double">
        <argument name="c" type="unsigned char" />
      </method>
      <method name="GetLineSpacing" const="true" return="double"/>
      <method name="GetUnderlineThickness" const="true" return="double"/>
      <method name="GetUnderlinePosition" const="true" return="double"/>
      <method name="GetStrikeOutPosition" const="true" return="double"/>
      <method name="GetStrikeoutThickness" const="true" return="double"/>
      <method name="GetFontname" const="true" return="const char*"/>
      <method name="GetWeight" const="true" return="unsigned int"/>
      <method name="GetAscent" const="true" return="double"/>
      <method name="GetPdfAscent" const="true" return="double"/>
      <method name="GetDescent" const="true" return="double"/>
      <method name="GetPdfDescent" const="true" return="double"/>
      <method name="GetItalicAngle" const="true" return="int"/>
      <method name="GetGlyphId" const="true" return="long">
        <argument name="lUnicode" type="long"/>
      </method>
      <method name="IsSymbol" const="true" return="bool"/>
      <method name="GetFontData" const="true" return="consy char*"/>
      <method name="GetFontDataLen" const="true" return="pdf_long"/>
    </class>
    <class name="PdfFontSimple" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontSimple" implementation_class_header="PoDoFo/doc/PdfFontSimple.h" base="PoDoFo::PdfFont">
      <constructor name="FromVecObjects" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="EmbedFont"/>
    </class>
    <class name="PdfFontTrueType" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontTrueType" implementation_class_header="PoDoFo/doc/PdfFontTrueType.h" base="PoDoFo::PdfFontSimple">
      <constructor name="FromVecObjects" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="bEmbed" type="bool"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
    </class>
    <class name="PdfFontTTFSubset" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontTTFSubset" implementation_class_header="PoDoFo/doc/PdfFontTTFSubset.h">
      <enumeration name="EFontFileType" underlying_type="unsigned char">
        <item name="eFontFileType_TTF"/>
        <item name="eFontFileType_TTC"/>
        <item name="eFontFileType_OTF"/>
        <item name="eFontFileType_Unknown"/>
      </enumeration>
      <constructor name="FromFile" >
        <argument name="pszFontFileName" type="const char* "/>
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="nFaceIndex" type="unsigned short"/>
      </constructor>
      <constructor name="FromUsingDevice" >
        <argument name="pDevice" type="PoDoFo::PdfInputDevice"/>
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="eType" type="PoDoFo::EFontFileType"/>
        <argument name="nFaceIndex" type="unsigned short"/>
      </constructor>
      <method name="BuildFont" >
        <argument name="outputBuffer" type="PoDoFo::PdfRefCountedBuffer"/>
        <argument name="usedChars" type="const std::set&lt;pdf_utf16be&gt;&amp;"/>
        <argument name="cidSet" type="std::vector&lt;unsigned char&gt;&amp;"/>
      </method>
    </class>
    <class name="PdfFontType1" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontType1" implementation_class_header="PoDoFo/doc/PdfFontType1.h" base="PoDoFo::PdfFontSimple">
      <constructor name="FromVecObjects" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="bEmbed" type="bool"/>
        <argument name="bSubsetting" type="bool"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pFont" type="PoDoFo::PdfFontType1"/>
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pszSuffix" type="const char*"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <method name="InitBase14Font"/>
    </class>
    <class name="PdfType1Encrypt" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfType1Encrypt" implementation_class_header="PoDoFo/doc/PdfFontType1.h">
      <constructor name="Default" />
      <method name="Encrypt" return="unsigned char">
        <argument name="plain" type="unsigned char"/>
      </method>
      <method name="Decrypt" return="unsigned char">
        <argument name="cipher" type="unsigned char"/>
      </method>
    </class>
    <class name="PdfType1EncryptEexec" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfType1EncryptEexec" implementation_class_header="PoDoFo/doc/PdfFontType1.h" base="PoDoFo::PdfType1Encrypt">
      <constructor name="Default" />
    </class>
    <class name="PdfType1EncryptCharstring" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfType1EncryptCharstring" implementation_class_header="PoDoFo/doc/PdfFontType1.h" base="PoDoFo::PdfType1Encrypt">
      <constructor name="Default" />
    </class>
    <class name="PdfFontType1Base14" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontType1Base14" implementation_class_header="PoDoFo/doc/PdfFontType1Base14.h" base="PoDoFo::PdfFontSimple">
      <constructor name="FromVecObjects" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
    </class>
    <class name="PdfFontType3" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFontType3" implementation_class_header="PoDoFo/doc/PdfFontType3.h" base="PoDoFo::PdfFontSimple">
      <constructor name="FromVecObjects" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pMetrics" type="PoDoFo::PdfFontMetrics"/>
        <argument name="pEncoding" type="PoDoFo::PdfEncoding"/>
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
    </class>
    <enumeration name="EPdfFunctionType" underlying_type="unsigned char">
      <item name="ePdfFunctionType_Sampled" value="0"/>
      <item name="ePdfFunctionType_Exponential" value="2"/>
      <item name="ePdfFunctionType_Stitching" value="3"/>
      <item name="ePdfFunctionType_PostScript" value="4"/>
    </enumeration>
    <class name="PdfFunction" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFunction" implementation_class_header="PoDoFo/doc/PdfFunction.h" base="PoDoFo::PdfElement">
    </class>
    <class name="PdfSampledFunction" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfSampledFunction" implementation_class_header="PoDoFo/doc/PdfFunction.h" base="PoDoFo::PdfFunction">
      <constructor name="FromVecObjects">
        <argument name="rDomain" type="PoDoFo::PdfArray"/>
        <argument name="rlstSamples" type="PoDoFo::PdfFunction::Sample"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument">
        <argument name="rDomain" type="PoDoFo::PdfArray"/>
        <argument name="rlstSamples" type="PoDoFo::PdfFunction::Sample"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
    </class>
    <class name="PdfExponentialFunction" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfExponentialFunction" implementation_class_header="PoDoFo/doc/PdfFunction.h" base="PoDoFo::PdfFunction">
      <constructor name="FromVecObjects">
        <argument name="rDomain" type="PoDoFo::PdfArray"/>
        <argument name="rlstSamples" type="PoDoFo::PdfFunction::Sample"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument">
        <argument name="rDomain" type="PoDoFo::PdfArray"/>
        <argument name="rlstSamples" type="PoDoFo::PdfFunction::Sample"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
    </class>
    <class name="PdfStitchingFunction" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfStitchingFunction" implementation_class_header="PoDoFo/doc/PdfFunction.h" base="PoDoFo::PdfFunction">
      <constructor name="FromVecObjects">
        <argument name="rDomain" type="PoDoFo::PdfArray"/>
        <argument name="rlstSamples" type="PoDoFo::PdfFunction::Sample"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument">
        <argument name="rDomain" type="PoDoFo::PdfArray"/>
        <argument name="rlstSamples" type="PoDoFo::PdfFunction::Sample"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
    </class>
    <namespace name="NonPublic">
      <class name="PdfHintStream" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfHintStream" implementation_class_header="PoDoFo/doc/PdfHintStream.h" base="PoDoFo::PdfElement">
        <constructor name="Default">
          <argument name="pPagesTree" type="PoDoFo::PdfPagesTree"/>
          <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        </constructor>
        <method name="WriteUInt16" >
          <argument name="val" type="pdf_uint16"/>
        </method>
        <method name="WriteUInt32" >
          <argument name="" type="pdf_uint32"/>
        </method>
      </class>
    </namespace>
    <class name="PdfIdentityEncoding" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfIdentityEncoding" implementation_class_header="PoDoFo/doc/PdfIdentityEncoding.h" base="PoDoFo::PdfEncoding">
      <constructor name="Default">
        <argument name="nFirstChar" type="int"/>
        <argument name="nLastChar" type="int"/>
        <argument name="bAutoDelete" type="bool"/>
        <argument name="pToUnicode" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="ConvertToUnicode" const="true" return="PoDoFo::PdfString">
        <argument name="rEncodedString" type="PoDoFo::PdfString"/>
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="AddToDictionary" const="true">
        <argument name="rDictionary" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="ConvertToEncoding" const="true" return="PoDoFo::PdfRefCountedBuffer">
        <argument name="rString" type="PoDoFo::PdfString"/>
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="IsAutoDelete" const="true" return="bool"/>
      <method name="IsSingleByteEncoding" const="true" return="bool"/>
      <method name="GetCharCode" const="true" return="pdf_utf16be">
        <argument name="nIndex" type="int"/>
      </method>
    </class>
    <class name="PdfImage" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfImage" implementation_class_header="PoDoFo/doc/PdfImage.h" base="PoDoFo::PdfXObject">
      <constructor name="FromVecObjects">
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="pszPrefix" type="const char*"/>
      </constructor>
      <constructor name="FromDocument">
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="pszPrefix" type="const char*"/>
      </constructor>
      <constructor name="FromObject">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="GetSupportedFormats" return="const char**"/>
      <method name="SetImageColorSpace">
        <argument name="eColorSpace" type="PoDoFo::EPdfColorSpace"/>
        <argument name="indexedData" type="PoDoFo::PdfArray"/>
      </method>
      <method name="SetImageColorSpace">
        <argument name="pStream" type="PoDoFo::PdfInputStream"/>
        <argument name="lColorComponents" type="long"/>
        <argument name="eAlternateColorSpace" type="PoDoFo::EPdfColorSpace"/>
      </method>
      <method name="SetImageSoftmask">
        <argument name="pSoftmask" type="PoDoFo::PdfImage"/>
      </method>
      <method name="GetWidth" return="double" const="true"/>
      <method name="GetHeight" return="double" const="true"/>
      <method name="SetImageData">
        <argument name="nWidth" type="unsigned int"/>
        <argument name="nHeight" type="unsigned int"/>
        <argument name="nBitsPerComponent" type="unsigned int"/>
        <argument name="pStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <!-- Name Override
            <method name="SetImageData">
                <argument name="nWidth" type="unsigned int"/>
                <argument name="nHeight" type="unsigned int"/>
                <argument name="nBitsPerComponent" type="unsigned int"/>
                <argument name="pStream" type="PoDoFo::PdfInputStream"/>
                <argument name="vecFilters" type="PoDoFo::TVecFilters"/>
            </method>
            -->
      <method name="SetImageDataRaw">
        <argument name="nWidth" type="unsigned int"/>
        <argument name="nHeight" type="unsigned int"/>
        <argument name="nBitsPerComponent" type="unsigned int"/>
        <argument name="pStream" type="PoDoFo::PdfInputStream"/>
      </method>
      <method name="LoadFromFile">
        <argument name="pszFilename" type="const char*"/>
      </method>
      <method name="LoadFromData">
        <argument name="pData" type="const unsigned char*"/>
        <argument name="dwLen" type="pdf_long"/>
      </method>
      <method name="LoadFromPng">
        <argument name="pszFilename" type="const char*"/>
      </method>
      <method name="LoadFromPngData">
        <argument name="pData" type="const unsigned char*"/>
        <argument name="dwLen" type="pdf_long"/>
      </method>
      <method name="SetImageChromaKeyMask">
        <argument name="r" type="pdf_int64"/>
        <argument name="b" type="pdf_int64"/>
        <argument name="g" type="pdf_int64"/>
        <argument name="threshold" type="pdf_int64"/>
      </method>
      <method name="SetInterpolate">
        <argument name="v" type="bool"/>
      </method>
    </class>
    <class name="PdfInfo" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfInfo" implementation_class_header="PoDoFo/doc/PdfInfo.h" base="PoDoFo::PdfElement">
      <enumeration name="EPdfInfoInitial" underlying_type="unsigned byte">
        <item name="ePdfInfoInitial_WriteCreationTime" value="0x01"/>
        <item name="ePdfInfoInitial_WriteModificationTime" value="0x02"/>
        <item name="ePdfInfoInitial_WriteProducer" value="0x04"/>
      </enumeration>
      <constructor name="FromVecObjects" >
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="eInitial" type="int"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="eInitial" type="int"/>
      </constructor>
      <property name="Author" type="PoDoFo::PdfString"/>
      <property name="Creator" type="PoDoFo::PdfString"/>
      <property name="Keywords" type="PoDoFo::PdfString"/>
      <property name="Subject" type="PoDoFo::PdfString"/>
      <property name="Title" type="PoDoFo::PdfString"/>
      <property name="Producer" type="PoDoFo::PdfString"/>
      <property name="Trapped" type="PoDoFo::PdfName"/>
      <method name="GetCreationDate" const="true" return="PoDoFo::PdfDate"/>
      <method name="GetModDate" const="true" return="PoDoFo::PdfDate"/>
      <method name="SetCustomKey" >
        <argument name="sName" type="PoDoFo::PdfName"/>
        <argument name="sValue" type="PoDoFo::PdfString"/>
      </method>
    </class>
    <class name="PdfMemDocument" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfMemDocument" implementation_class_header="PoDoFo/doc/PdfMemDocument.h" base="PoDoFo::PdfDocument">
      <constructor name="Default" />
      <constructor name="FromBool" >
        <argument name="bOnlyTrailer" type="bool"/>
      </constructor>
      <constructor name="FromFile" >
        <argument name="pszFilename" type="const char*"/>
        <argument name="bForUpdate" type="bool"/>
      </constructor>
      <method name="Load" >
        <argument name="pszFilename" type="const char*"/>
        <argument name="bForUpdate" type="bool"/>
      </method>
      <!-- Name Override
            <method name="Load" >
                <argument name="pBuffer" type="const char*"/>
                <argument name="lLen" type="long"/>
                <argument name="bForUpdate" type="bool"/>
            </method>
            <method name="Load" >
                <argument name="rDevice" type="PoDoFo::PdfRefCountedInputDevice"/>
                <argument name="bForUpdate" type="bool"/>
            </method>
            -->
      <method name="IsLoaded" return="bool" const="true"/>
      <method name="Write" >
        <argument name="pszFilename" type="const char*"/>
      </method>
      <!-- Name Override
            <method name="Write" >
                <argument name="rDevice" type="PoDoFo::PdfRefCountedInputDevice"/>
            </method>
            -->
      <method name="WriteUpdate" >
        <argument name="pszFilename" type="const char*"/>
      </method>
      <!-- Name Override
            <method name="WriteUpdate" >
                <argument name="rDevice" type="PoDoFo::PdfRefCountedInputDevice"/>
                <argument name="bTruncate" type="bool"/>
            </method>
            -->
      <property name="WriteMode" type="PoDoFo::EPdfWriteMode"/>
      <property name="PdfVersion" type="PoDoFo::EPdfVersion"/>
      <method name="AddPdfExtension" >
        <argument name="ns" type="const char*" />
        <argument name="level" type="pdf_int64"/>
      </method>
      <method name="HasPdfExtension" return="bool" const="true">
        <argument name="ns" type="const char*" />
        <argument name="level" type="pdf_int64"/>
      </method>
      <method name="RemovePdfExtension" >
        <argument name="ns" type="const char*" />
        <argument name="level" type="pdf_int64"/>
      </method>

      <method name="GetPdfExtensions" return="std::vector&lt;PoDoFo::PdfExtension&gt;" const="true"/>
      <method name="SetPassword" >
        <argument name="sPassword" type="const char*"/>
      </method>
      <method name="SetEncrypted" >
        <argument name="userPassword" type="const char*"/>
        <argument name="ownerPassword" type="const char*"/>
        <argument name="protection" type="int"/>
        <argument name="eAlgorithm" type="PoDoFo::PdfEncrypt::EPdfEncryptAlgorithm"/>
        <argument name="eKeyLength" type="PoDoFo::PdfEncrypt::EPdfKeyLength"/>
      </method>
      <!-- Name Override
            <method name="SetEncrypted" >
                <argument name="eKeyLength" type="PoDoFo::PdfEncrypt"/>
            </method>
            -->
      <method name="GetEncrypted" return="bool" const="true"/>
      <method name="IsLinearized" return="bool" const="true"/>
      <method name="GetObjects" return="PoDoFo::PdfVecObjects" const="true"/>
      <method name="GetCatalog" return="PoDoFo::PdfObject" const="true"/>
      <method name="GetTrailer" return="PoDoFo::PdfObject" const="true"/>
      <method name="GetStructTreeRoot" return="bool" const="true"/>
      <method name="GetMetadata" return="bool" const="true"/>
      <method name="GetMarkInfo" return="PoDoFo::PdfVecObjects" const="true"/>
      <method name="GetLanguage" return="PoDoFo::PdfObject" const="true"/>
      <method name="GetFont" return="PoDoFo::PdfObject"/>
      <method name="InsertPages" return="PoDoFo::PdfMemDocument">
        <argument name="rDoc" type="PoDoFo::PdfMemDocument"/>
        <argument name="inFirstPage" type="int"/>
        <argument name="inNumPages" type="int"/>
      </method>
      <method name="InsertPages" >
        <argument name="inFirstPage" type="int"/>
        <argument name="inNumPages" type="int"/>
      </method>
      <method name="IsPrintAllowed" return="bool" const="true"/>
      <method name="IsEditAllowed" return="bool" const="true"/>
      <method name="IsCopyAllowed" return="bool" const="true"/>
      <method name="IsEditNotesAllowed" return="bool" const="true"/>
      <method name="IsFillAndSignAllowed" return="bool" const="true"/>
      <method name="IsAccessibilityAllowed" return="bool" const="true"/>
      <method name="IsDocAssemblyAllowed" return="bool" const="true"/>
      <method name="IsHighPrintAllowed" return="bool" const="true"/>
      <method name="FreeObjectMemory" >
        <argument name="rRef" type="PoDoFo::PdfReference"/>
        <argument name="bForce" type="bool"/>
      </method>
      <!-- Name Override
            <method name="FreeObjectMemory" >
                <argument name="pObj" type="PoDoFo::PdfObject"/>
                <argument name="bForce" type="bool"/>
            </method>
            -->
      <method name="GetEncrypt" const="true" return="PoDoFo::PdfEncrypt"/>
    </class>
    <enumeration name="EPdfNameLimits" underlying_type="unsigned char">
      <item name="ePdfNameLimits_Before"/>
      <item name="ePdfNameLimits_Inside"/>
      <item name="ePdfNameLimits_After"/>
    </enumeration>
    <class name="PdfNamesTree" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfNamesTree" implementation_class_header="PoDoFo/doc/PdfNamesTree.h" base="PoDoFo::PdfElement">
      <constructor name="FromVecObjects" >
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pObject" type="PoDoFo::PdfObject"/>
        <argument name="pCatalog" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="AddValue" >
        <argument name="tree" type="PoDoFo::PdfName"/>
        <argument name="key" type="PoDoFo::PdfString"/>
        <argument name="rValue" type="PoDoFo::PdfObject"/>
      </method>
      <method name="GetValue" return="PoDoFo::PdfObject" const="true">
        <argument name="tree" type="PoDoFo::PdfName"/>
        <argument name="key" type="PoDoFo::PdfString"/>
      </method>
      <method name="HasValue" return="bool" const="true">
        <argument name="tree" type="PoDoFo::PdfName"/>
        <argument name="key" type="PoDoFo::PdfString"/>
      </method>
      <method name="CheckLimits" return="PoDoFo::EPdfNameLimits">
        <argument name="pObj" type="PoDoFo::PdfObject"/>
        <argument name="key" type="PoDoFo::PdfString"/>
      </method>
      <method name="ToDictionary" >
        <argument name="dictionary" type="PoDoFo::PdfName"/>
        <argument name="rDict" type="PoDoFo::PdfDictionary"/>
      </method>
      <method name="GetJavaScriptNode" return="PoDoFo::PdfObject" const="true">
        <argument name="bCreate" type="bool"/>
      </method>
      <method name="GetDestsNode" return="PoDoFo::PdfObject" const="true">
        <argument name="bCreate" type="bool"/>
      </method>

    </class>
    <enumeration name="EPdfOutlineFormat" underlying_type="unsigned char">
      <item name="ePdfOutlineFormat_Default" value="0x00"/>
      <item name="ePdfOutlineFormat_Italic" value="0x01"/>
      <item name="ePdfOutlineFormat_Bold" value="0x02"/>
      <item name="ePdfOutlineFormat_BoldItalic" value="0x03"/>
      <item name="ePdfOutlineFormat_Unknown" value="0xff"/>
    </enumeration>
    <class name="PdfOutlineItem" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfOutlineItem" implementation_class_header="PoDoFo/doc/PdfOutlineItem.h" base="PoDoFo::PdfElement">
      <method name="CreateChild" return="PoDoFo::PdfOutlineItem" >
        <argument name="sTitle" type="PoDoFo::PdfString"/>
        <argument name="rDest" type="PoDoFo::PdfDestination"/>
      </method>
      <method name="CreateNext" return="PoDoFo::PdfOutlineItem" >
        <argument name="sTitle" type="PoDoFo::PdfString"/>
        <argument name="rDest" type="PoDoFo::PdfDestination"/>
      </method>
      <!--Name Override
            <method name="CreateNext" return="PoDoFo::PdfOutlineItem" >
                <argument name="sTitle" type="PoDoFo::PdfString"/>
                <argument name="rAction" type="PoDoFo::PdfAction"/>
            </method>
            -->
      <method name="InsertChild" >
        <argument name="pItem" type="PoDoFo::PdfOutlineItem"/>
      </method>
      <method name="Prev" return="PoDoFo::PdfOutlineItem" const="true"/>
      <method name="Next" return="PoDoFo::PdfOutlineItem" const="true"/>
      <method name="First" return="PoDoFo::PdfOutlineItem" const="true"/>
      <method name="Last" return="PoDoFo::PdfOutlineItem" const="true"/>
      <method name="GetParentOutline" return="PoDoFo::PdfOutlineItem" const="true"/>
      <method name="Erase" />
      <method name="SetDestination" >
        <argument name="rDest" type="PoDoFo::PdfDestination"/>
      </method>
      <method name="GetDestination" return="PoDoFo::PdfDestination">
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </method>
      <property name="Action" type="PoDoFo::PdfAction"/>
      <property name="Title" type="PoDoFo::PdfString"/>
      <property name="SetTextFormat" type="PoDoFo::EPdfOutlineFormat"/>
      <method name="SetTextColor" >
        <argument name="r" type="double"/>
        <argument name="g" type="double"/>
        <argument name="b" type="double"/>
      </method>
      <method name="GetTextColorRed" return="double" const="true"/>
      <method name="GetTextColorBlue" return="double" const="true"/>
      <method name="GetTextColorGreen" return="double" const="true"/>
    </class>
    <class name="PdfOutlines" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfOutlines" implementation_class_header="PoDoFo/doc/PdfOutlineItem.h" base="PoDoFo::PdfOutlineItem">
      <constructor name="FromParent">
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="CreateRoot" return="PoDoFo::PdfOutlineItem">
        <argument name="sTitle" type="PoDoFo::PdfString" />
      </method>
    </class>
    <class name="PdfPage" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfPage" implementation_class_header="PoDoFo/doc/PdfPage.h" base="PoDoFo::PdfElement">
      <constructor name="FromDocument">
        <argument name="rSize" type="PoDoFo::PdfRect" />
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromVecObjects">
        <argument name="rSize" type="PoDoFo::PdfRect" />
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject">
        <argument name="pObject" type="PoDoFo::PdfObject" />
        <argument name="listOfParents" type="std::deque&lt;PoDoFo::PdfObject*&gt;&amp;"/>
      </constructor>
      <method name="GetPageSize" const="true" return="PoDOFO::PdfRect" />
      <method name="SetPageWidth" return="bool">
        <argument name="newWidth" type="int"/>
      </method>
      <method name="SetPageHeight" return="bool">
        <argument name="newHeight" type="int"/>
      </method>
      <method name="SetTrimBox" return="bool">
        <argument name="rSize" type="PoDoFo::PdfRect"/>
      </method>
      <method name="GetPageNumber" const="true" return="unsigned int" />
      <method name="CreateStandardPageSize" return="PoDoFo::PdfRect">
        <argument name="ePageSize" type="PoDoFo::EPdfPageSize"/>
        <argument name="bLandscape" type="bool"/>
      </method>
      <method name="GetContents" const="true" return="PoDoFo::PdfObject" />
      <method name="GetContentsForAppending" const="true" return="PoDoFo::PdfObject" />
      <method name="GetResources" const="true" return="PoDoFo::PdfObject" />
      <method name="GetMediaBox" const="true" return="PoDoFo::PdfObject" />
      <method name="GetCropBox" const="true" return="PoDoFo::PdfObject" />
      <method name="GetTrimBox" const="true" return="PoDoFo::PdfObject" />
      <method name="GetBleedBox" const="true" return="PoDoFo::PdfObject" />
      <method name="GetArtBox" const="true" return="PoDoFo::PdfObject" />
      <property name="Rotation" type="int" />
      <method name="GetNumAnnots" const="true" return="PoDoFo::PdfObject" />
      <method name="CreateAnnotation" return="PoDoFo::PdfAnnotation" >
        <argument name="eType" type="PoDoFo::EPdfAnnotation"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
      </method>
      <method name="GetAnnotation" return="PoDoFo::PdfAnnotation" >
        <argument name="index" type="int"/>
      </method>
      <method name="DeleteAnnotation">
        <argument name="index" type="int"/>
      </method>
      <!--Name override
            <method name="DeleteAnnotation">
                <argument name="ref" type="PoDoFo::PdfReference"/>
            </method>
            -->
      <method name="GetNumFields" const="true" return="int" />

      <method name="GetField" return="PoDoFo::PdfField" const="true">
        <argument name="index" type="int"/>
      </method>
      <method name="GetFromResources" return="PoDoFo::PdfObject">
        <argument name="rType" type="PoDoFo::PdfName"/>
        <argument name="rKey" type="PoDoFo::PdfName"/>
      </method>
      <method name="GetInheritedKey" return="PoDoFo::PdfObject" const="true">
        <argument name="rName" type="PoDoFo::PdfName"/>
      </method>
      <method name="GetOwnAnnotationsArray" return="PoDoFo::PdfObject">
        <argument name="bCreate" type="bool"/>
        <argument name="pDocument" type="PoDoFo::PdfDocument"/>
      </method>
    </class>
    <class name="PdfPagesTree" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfPagesTree" implementation_class_header="PoDoFo/doc/PdfPagesTree.h" base="PoDoFo::PdfElement">
      <constructor name="FromVecObjects" >
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromObject" >
        <argument name="pPagesRoot" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="GetTotalNumberOfPages" return="int" const="true"/>
      <method name="GetPage" return="PoDoFo::PdfPage" const="true">
        <argument name="nIndex" type="int"/>
      </method>
      <!--Name override
            <method name="GetPage" return="int" const="PoDoFo::PdfPage">
                <argument name="ref" type="PoDoFo::PdfReference"/>
            </method>
            -->
      <method name="InsertPage" >
        <argument name="nAfterPageIndex" type="int"/>
        <argument name="pPage" type="PoDoFo::PdfPage"/>
      </method>
      <!--Name override
            <method name="InsertPage" >
                <argument name="nAfterPageIndex" type="int"/>
                <argument name="pPage" type="PoDoFo::PdfObject"/>
            </method>
            <method name="InsertPage" return="PoDoFo::PdfPage" >
                <argument name="rSize" type="PoDoFo::PdfRect"/>
                <argument name="atIndex" type="int"/>
            </method>
            -->
      <method name="CreatePage" >
        <argument name="rSize" type="PoDoFo::PdfRect"/>
      </method>
      <method name="CreatePage" >
        <argument name="vecSizes" type="const std::vector&lt;PdfRect&gt;&amp;"/>
      </method>
      <method name="DeletePage" >
        <argument name="inPageNumber" type="int"/>
      </method>
      <method name="ClearCache"/>
    </class>
    <class name="PdfPagesTreeCache" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfPagesTreeCache" implementation_class_header="PoDoFo/doc/PdfPagesTreeCache.h">
      <constructor name="Default" >
        <argument name="nInitialSize" type="int"/>
      </constructor>
      <method name="GetPage" return="PoDoFo::PdfPage">
        <argument name="nIndex" type="int"/>
      </method>
      <method name="AddPageObject" return="PoDoFo::PdfPage">
        <argument name="nIndex" type="int"/>
        <argument name="pPage" type="PoDoFo::PdfPage"/>
      </method>
      <method name="AddPageObjects" return="PoDoFo::PdfPage">
        <argument name="nIndex" type="int"/>
        <argument name="vecPages" type="std::vector&lt;PoDoFo::PdfPage*&gt;"/>
      </method>
      <method name="InsertPage" >
        <argument name="nAfterPageIndex" type="int"/>
      </method>
      <!--Name override
            <method name="InsertPage" >
                <argument name="nAfterPageIndex" type="int"/>
                <argument name="nCount" type="int"/>
            </method>
                -->
      <method name="DeletePage" >
        <argument name="inPageNumber" type="int"/>
      </method>
      <method name="ClearCache"/>
    </class>
    <class name="PdfPainter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfPainter" implementation_class_header="PoDoFo/doc/PdfPainter.h">
      <constructor name="Default"/>
      <property name="Page" type="PoDoFo::PdfCanvas"/>
      <method name="GetCanvas" const="true" return="PoDoFo::PdfStream"/>
      <method name="FinishPage"/>
      <method name="SetStrokingGray">
        <argument name="g" type="double"/>
      </method>
      <method name="SetStrokingColor">
        <argument name="r" type="double"/>
        <argument name="g" type="double"/>
        <argument name="b" type="double"/>
      </method>
      <method name="SetColor">
        <argument name="r" type="double"/>
        <argument name="g" type="double"/>
        <argument name="b" type="double"/>
      </method>
      <method name="SetStrokingColorCMYK">
        <argument name="c" type="double"/>
        <argument name="m" type="double"/>
        <argument name="y" type="double"/>
        <argument name="k" type="double"/>
      </method>
      <method name="SetColorCMYK">
        <argument name="c" type="double"/>
        <argument name="m" type="double"/>
        <argument name="y" type="double"/>
        <argument name="k" type="double"/>
      </method>
      <method name="SetStrokingShadingPattern" >
        <argument name="rPattern" type="PoDoFo::PdfShadingPattern"/>
      </method>
      <method name="SetShadingPattern" >
        <argument name="rPattern" type="PoDoFo::PdfShadingPattern"/>
      </method>

      <method name="SetStrokingTilingPattern" >
        <argument name="rPattern" type="PoDoFo::PdfShadingPattern"/>
      </method>
      <!--Name override
            <method name="SetStrokingTilingPattern" >
                <argument name="rPatternName" type="const char*"/>
            </method>
            -->
      <method name="SetTilingPattern" >
        <argument name="rPattern" type="PoDoFo::PdfShadingPattern"/>
      </method>
      <!--Name override
            <method name="SetTilingPattern" >
                <argument name="rPatternName" type="const char*"/>
            </method>
            -->
      <method name="SetStrokingColor" >
        <argument name="rPattern" type="PoDoFo::rColor"/>
      </method>
      <method name="SetColor" >
        <argument name="rPattern" type="PoDoFo::rColor"/>
      </method>
      <method name="SetStrokeWidth" >
        <argument name="dWidth" type="double"/>
      </method>
      <method name="SetStrokeStyle" >
        <argument name="eStyle" type="PoDoFo::EPdfStrokeStyle"/>
        <argument name="pszCustom" type="const char*"/>
        <argument name="inverted" type="bool"/>
        <argument name="scale" type="double"/>
        <argument name="subtractJoinCap" type="bool"/>
      </method>
      <method name="SetLineCapStyle" >
        <argument name="eCapStyle" type="PoDoFo::EPdfLineCapStyle"/>
      </method>
      <method name="SetLineJoinStyle" >
        <argument name="eJoinStyle" type="PoDoFo::EPdfLineJoinStyle"/>
      </method>
      <method name="SetFont" >
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="SetTextRenderingMode" >
        <argument name="mode" type="PoDoFo::EPdfTextRenderingMode"/>
      </method>
      <method name="GetTextRenderingMode" return="PoDoFo::EPdfTextRenderingMode" const="true"/>
      <method name="GetFont" return="PoDoFo::PdfFont" const="true"/>
      <method name="SetClipRect" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dWidth" type="double"/>
        <argument name="dHeight" type="double"/>
      </method>
      <!--Name override
            <method name="SetClipRect" >
                <argument name="rRect" type="PoDoFo::PdfRect"/>
            </method>
            -->
      <method name="SetMiterLimit" >
        <argument name="value" type="double"/>
      </method>
      <method name="DrawLine" >
        <argument name="dStartX" type="double"/>
        <argument name="dStartY" type="double"/>
        <argument name="dEndX" type="double"/>
        <argument name="dEndY" type="double"/>
      </method>
      <method name="Rectangle" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dWidth" type="double"/>
        <argument name="dHeight" type="double"/>
        <argument name="dRoundX" type="double"/>
        <argument name="dRoundY" type="double"/>
      </method>
      <!--Name override
            <method name="Rectangle" >
                <argument name="rRect" type="PoDoFo::PdfRect"/>
                <argument name="dRoundX" type="double"/>
                <argument name="dRoundY" type="double"/>
            </method>
            -->
      <method name="Ellipse" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dWidth" type="double"/>
        <argument name="dHeight" type="double"/>
      </method>

      <method name="Circle" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dRadius" type="double"/>
      </method>
      <method name="DrawText" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="sText" type="PoDoFo::PdfString"/>
      </method>
      <!--Name override
            <method name="DrawText" >
                <argument name="dX" type="double"/>
                <argument name="dY" type="double"/>
                <argument name="rsText" type="PoDoFo::PdfString"/>
                <argument name="lLen" type="long"/>
            </method>
            -->
      <method name="DrawMultiLineText" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dWidth" type="double"/>
        <argument name="dHeight" type="double"/>
        <argument name="rsText" type="PoDoFo::PdfString"/>
        <argument name="eAlignment" type="PoDoFo::EPdfAlignment"/>
        <argument name="eVertical" type="PoDoFo::EPdfVerticalAlignment"/>
        <argument name="bClip" type="bool"/>
      </method>
      <!--Name override
            <method name="DrawMultiLineText" >
                <argument name="rRect" type="PoDoFo::PdfRect"/>
                <argument name="rsText" type="PoDoFo::PdfString"/>
                <argument name="eAlignment" type="PoDoFo::EPdfAlignment"/>
                <argument name="eVertical" type="PoDoFo::EPdfVerticalAlignment"/>
                <argument name="bClip" type="bool"/>
            </method>
            -->
      <method name="GetMultiLineTextAsLines" return="std::vector&lt;PoDoFo::PdfString&gt;" >
        <argument name="dWidth" type="double"/>
        <argument name="rsText" type="PoDoFo::PdfString"/>
      </method>
      <method name="DrawTextAligned" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dWidth" type="double"/>
        <argument name="rsText" type="PoDoFo::PdfString"/>
        <argument name="eAlignment" type="PoDoFo::EPdfAlignment"/>
      </method>
      <method name="BeginText" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
      </method>
      <method name="AddText" >
        <argument name="sText" type="PoDoFo::PdfString"/>
      </method>
      <method name="AddText" >
        <argument name="sText" type="PoDoFo::PdfString"/>
        <argument name="lStringLen" type="pdf_long"/>
      </method>
      <method name="MoveTextPos" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
      </method>
      <method name="EndText"/>
      <method name="DrawGlyph" >
        <argument name="pDocument" type="PoDoFo::PdfMemDocument"/>
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="pszGlyphname" type="const char*"/>
      </method>
      <method name="DrawImage" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="pObject" type="PoDoFo::PdfImage"/>
        <argument name="dScaleX" type="double"/>
        <argument name="dScaleY" type="double"/>
      </method>
      <method name="DrawXObject" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="pObject" type="PoDoFo::PdfXObject"/>
        <argument name="dScaleX" type="double"/>
        <argument name="dScaleY" type="double"/>
      </method>
      <method name="ClosePath"/>
      <method name="LineTo" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
      </method>
      <method name="MoveTo" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
      </method>
      <method name="CubicBezierTo" >
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="dX2" type="double"/>
        <argument name="dY2" type="double"/>
        <argument name="dX3" type="double"/>
        <argument name="dY3" type="double"/>
      </method>
      <method name="HorizontalLineTo" >
        <argument name="dX" type="double"/>
      </method>
      <method name="VerticalLineTo" >
        <argument name="dY" type="double"/>
      </method>
      <method name="SmoothCurveTo" >
        <argument name="dX2" type="double"/>
        <argument name="dY2" type="double"/>
        <argument name="dX3" type="double"/>
        <argument name="dY3" type="double"/>
      </method>
      <method name="QuadCurveTo" >
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="dX3" type="double"/>
        <argument name="dY3" type="double"/>
      </method>
      <method name="SmoothQuadCurveTo" >
        <argument name="dX3" type="double"/>
        <argument name="dY3" type="double"/>
      </method>
      <method name="ArcTo" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dRadiusX" type="double"/>
        <argument name="dRadiusY" type="double"/>
        <argument name="dRotation" type="double"/>
        <argument name="bLarge" type="bool"/>
        <argument name="bSweep" type="bool"/>
      </method>
      <method name="ArcTo" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dRadius" type="double"/>
        <argument name="dAngle1" type="double"/>
        <argument name="dAngle2" type="double"/>
      </method>
      <method name="Close"/>
      <method name="Stroke"/>
      <method name="Fill">
        <argument name="useEvenOddRule" type="bool"/>
      </method>
      <method name="FillAndStroke">
        <argument name="useEvenOddRule" type="bool"/>
      </method>
      <method name="Clip">
        <argument name="useEvenOddRule" type="bool"/>
      </method>
      <method name="EndPath"/>
      <method name="Save"/>
      <method name="Restore"/>
      <method name="SetTransformationMatrix" >
        <argument name="a" type="double"/>
        <argument name="b" type="double"/>
        <argument name="c" type="double"/>
        <argument name="d" type="double"/>
        <argument name="e" type="double"/>
        <argument name="f" type="double"/>
      </method>
      <method name="SetExtGState">
        <argument name="inGState" type="PoDoFo::PdfExtGState"/>
      </method>
      <method name="SetRenderingIntent" >
        <argument name="intent" type="char*"/>
      </method>
      <property name="TabWidth" type="unsigned short"/>
      <property name="Precision" type="unsigned short"/>
      <method name="SetTransformationMatrix" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="dWidth" type="double"/>
        <argument name="dHeight" type="double"/>
        <argument name="pdPointX" type="double[]"/>
        <argument name="pdPointY" type="double[]"/>
      </method>
    </class>
    <class name="PdfPainterMM" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfPainterMM" implementation_class_header="PoDoFo/doc/PdfPainterMM.h" base="PoDoFo::PdfPainter">
      <constructor name="Default"/>
      <method name="SetStrokeWidthMM" >
        <argument name="lWidth" type="long"/>
      </method>
      <method name="DrawLineMM" >
        <argument name="lStartX" type="long"/>
        <argument name="lStartY" type="long"/>
        <argument name="lEndX" type="long"/>
        <argument name="lEndY" type="long"/>
      </method>
      <method name="RectangleMM" >
        <argument name="lY" type="long"/>
        <argument name="lY" type="long"/>
        <argument name="lWidth" type="long"/>
        <argument name="lHeight" type="long"/>
      </method>
      <method name="EllipseMM" >
        <argument name="lY" type="long"/>
        <argument name="lY" type="long"/>
        <argument name="lWidth" type="long"/>
        <argument name="lHeight" type="long"/>
      </method>
      <method name="DrawTextMM" >
        <argument name="lY" type="long"/>
        <argument name="lY" type="long"/>
        <argument name="sText" type="PoDoFo::PdfString"/>
      </method>
      <!--
            <method name="DrawTextMM" >
                <argument name="lY" type="long"/>
                <argument name="lY" type="long"/>
                <argument name="sText" type="PoDoFo::PdfString"/>
                <argument name="lLen" type="long"/>
            </method>
            -->
      <method name="DrawImageMM" >
        <argument name="lY" type="long"/>
        <argument name="lY" type="long"/>
        <argument name="pObject" type="PoDoFo::PdfImage"/>
        <argument name="dScaleX" type="double"/>
        <argument name="dScaleY" type="double"/>
      </method>
      <method name="DrawXObjectMM" >
        <argument name="lY" type="long"/>
        <argument name="lY" type="long"/>
        <argument name="pObject" type="PoDoFo::PdfXObject"/>
        <argument name="dScaleX" type="double"/>
        <argument name="dScaleY" type="double"/>
      </method>
      <method name="LineToMM" >
        <argument name="lY" type="long"/>
        <argument name="lY" type="long"/>
      </method>
      <method name="MoveToMM" >
        <argument name="lY" type="long"/>
        <argument name="lY" type="long"/>
      </method>
    </class>
    <enumeration name="EPdfShadingPatternType" underlying_type="unsigned char">
      <item name="ePdfShadingPatternType_FunctionBase" value="1"/>
      <item name="ePdfShadingPatternType_Axial" value="2"/>
      <item name="ePdfShadingPatternType_Radial" value="3"/>
      <item name="ePdfShadingPatternType_FreeForm" value="4"/>
      <item name="ePdfShadingPatternType_LatticeForm" value="5"/>
      <item name="ePdfShadingPatternType_CoonsPatch" value="6"/>
      <item name="ePdfShadingPatternType_TensorProduct" value="7"/>
    </enumeration>
    <class name="PdfShadingPattern" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfShadingPattern" implementation_class_header="PoDoFo/doc/PdfShadingPattern.h" base="PoDoFo::PdfElement">
      <method name="GetIdentifier" const="true" return="PoDoFo::PdfName"/>
    </class>
    <class name="PdfAxialShadingPattern" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfAxialShadingPattern" implementation_class_header="PoDoFo/doc/PdfShadingPattern.h" base="PoDoFo::PdfShadingPattern">
      <constructor name="FromVecObjects" >
        <argument name="dX0" type="double"/>
        <argument name="dY0" type="double"/>
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="rStart" type="PoDoFo::PdfColor"/>
        <argument name="rEnd" type="PoDoFo::PdfColor"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument" >
        <argument name="dX0" type="double"/>
        <argument name="dY0" type="double"/>
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="rStart" type="PoDoFo::PdfColor"/>
        <argument name="rEnd" type="PoDoFo::PdfColor"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
    </class>
    <class name="PdfFunctionBaseShadingPattern" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfFunctionBaseShadingPattern" implementation_class_header="PoDoFo/doc/PdfShadingPattern.h" base="PoDoFo::PdfShadingPattern">
      <constructor name="FromVecObjects" >
        <argument name="rLL" type="PoDoFo::PdfColor"/>
        <argument name="rUL" type="PoDoFo::PdfColor"/>
        <argument name="rLR" type="PoDoFo::PdfColor"/>
        <argument name="rUR" type="PoDoFo::PdfColor"/>
        <argument name="rMatrix" type="PoDoFo::PdfArray"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument" >
        <argument name="rLL" type="PoDoFo::PdfColor"/>
        <argument name="rUL" type="PoDoFo::PdfColor"/>
        <argument name="rLR" type="PoDoFo::PdfColor"/>
        <argument name="rUR" type="PoDoFo::PdfColor"/>
        <argument name="rMatrix" type="PoDoFo::PdfArray"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
    </class>
    <class name="PdfRadialShadingPattern" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfRadialShadingPattern" implementation_class_header="PoDoFo/doc/PdfShadingPattern.h" base="PoDoFo::PdfShadingPattern">
      <constructor name="FromVecObjects" >
        <argument name="dX0" type="double"/>
        <argument name="dY0" type="double"/>
        <argument name="dR0" type="double"/>
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="dR1" type="double"/>
        <argument name="rStart" type="PoDoFo::PdfColor"/>
        <argument name="rEnd" type="PoDoFo::PdfColor"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument" >
        <argument name="dX0" type="double"/>
        <argument name="dY0" type="double"/>
        <argument name="dR0" type="double"/>
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="dR1" type="double"/>
        <argument name="rStart" type="PoDoFo::PdfColor"/>
        <argument name="rEnd" type="PoDoFo::PdfColor"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
    </class>
    <class name="PdfTriangleShadingPattern" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfTriangleShadingPattern" implementation_class_header="PoDoFo/doc/PdfShadingPattern.h" base="PoDoFo::PdfShadingPattern">
      <constructor name="FromVecObjects" >
        <argument name="dX0" type="double"/>
        <argument name="dY0" type="double"/>
        <argument name="color0" type="PoDoFo::PdfColor"/>
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="color1" type="PoDoFo::PdfColor"/>
        <argument name="dX2" type="double"/>
        <argument name="dY2" type="double"/>
        <argument name="color2" type="PoDoFo::PdfColor"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
      </constructor>
      <constructor name="FromDocument" >
        <argument name="dX0" type="double"/>
        <argument name="dY0" type="double"/>
        <argument name="color0" type="PoDoFo::PdfColor"/>
        <argument name="dX1" type="double"/>
        <argument name="dY1" type="double"/>
        <argument name="color1" type="PoDoFo::PdfColor"/>
        <argument name="dX2" type="double"/>
        <argument name="dY2" type="double"/>
        <argument name="color2" type="PoDoFo::PdfColor"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
      </constructor>
    </class>
    <enumeration name="EPdfCertPermission" underlying_type="unsigned char">
      <item name="ePdfCertPermission_NoPerms" value="1"/>
      <item name="ePdfCertPermission_FormFill" value="2"/>
      <item name="ePdfCertPermission_Annotations" value="3"/>
    </enumeration>
    <class name="PdfSignatureField" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfSignatureField" implementation_class_header="PoDoFo/doc/PdfSignatureField.h" base="PoDoFo::PdfField">
      <constructor name="FromPage" >
        <argument name="pPage" type="PoDoFo::PdfPage"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
      </constructor>
      <constructor name="FromWidget" >
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pDoc" type="PoDoFo::PdfDocument"/>
        <argument name="bInit" type="bool"/>
      </constructor>
      <constructor name="FromWidget1" >
        <argument name="pWidget" type="PoDoFo::PdfAnnotation"/>
      </constructor>
      <method name="SetAppearanceStream" >
        <argument name="pObject" type="PoDoFo::PdfXObject"/>
        <argument name="eAppearance" type="PoDoFo::EPdfAnnotationAppearance"/>
        <argument name="state" type="PoDoFo::PdfName"/>
      </method>
      <method name="SetSignature" >
        <argument name="signatureData" type="PoDoFo::PdfData"/>
      </method>
      <method name="SetSignatureReason" >
        <argument name="rsText" type="PoDoFo::PdfString"/>
      </method>
      <method name="SetSignatureLocation" >
        <argument name="rsText" type="PoDoFo::PdfString"/>
      </method>
      <method name="SetSignatureCreator" >
        <argument name="creator" type="PoDoFo::PdfName"/>
      </method>
      <method name="SetSignatureLocation" >
        <argument name="rsText" type="PoDoFo::PdfString"/>
      </method>
      <method name="SetSignatureDate" >
        <argument name="sigDate" type="PoDoFo::PdfDate"/>
      </method>
      <method name="AddCertificationReference" >
        <argument name="pDocumentCatalog" type="PoDoFo::PdfObject"/>
        <argument name="perm" type="PoDoFo::EPdfCertPermission"/>
      </method>
      <method name="GetSignatureObject" const="true" return="PoDoFo::PdfObject" />
      <method name="EnsureSignatureObject" />
    </class>
    <class name="PdfSignOutputDevice" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfSignOutputDevice" implementation_class_header="PoDoFo/doc/PdfSignOutputDevice.h" base="PoDoFo::PdfOutputDevice">
      <constructor name="FromDevice" >
        <argument name="pRealDevice" type="PoDoFo::PdfOutputDevice"/>
      </constructor>
      <constructor name="FromFile" >
        <argument name="pszFilename" type="const char*"/>
      </constructor>
      <property name="SignatureSize" type="size_t"/>
      <method name="GetSignatureBeacon" return="PoDoFo::PdfData" const="true"/>
      <method name="HasSignaturePosition" return="bool" const="true"/>
      <method name="AdjustByteRange" />
      <method name="ReadForSignature"  return="size_t">
        <argument name="pBuffer" type="char*"/>
        <argument name="lLen" type="size_t"/>
      </method>
      <method name="SetSignature" >
        <argument name="sigData" type="PoDoFo::PdfData"/>
      </method>
      <method name="GetLength" return="size_t" const="true"/>
      <method name="Print" >
        <argument name="pszFormat" type="const char*"/>
      </method>
      <method name="Write" >
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="size_t"/>
      </method>
      <method name="Read" return="size_t">
        <argument name="pBuffer" type="const char*"/>
        <argument name="lLen" type="size_t"/>
      </method>
      <method name="Seek" >
        <argument name="lLen" type="size_t"/>
      </method>
      <method name="Tell" return="size_t"/>
      <method name="Flush"/>
    </class>
    <class name="PdfStreamedDocument" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfStreamedDocument" implementation_class_header="PoDoFo/doc/PdfStreamedDocument.h" base="PoDoFo::PdfDocument">
      <constructor name="FromDevice" >
        <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        <argument name="eVersion" type="PoDoFo::EPdfVersion"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
      </constructor>
      <constructor name="FromDevice" >
        <argument name="pszFilename" type="const char*"/>
        <argument name="eVersion" type="PoDoFo::EPdfVersion"/>
        <argument name="pEncrypt" type="PoDoFo::PdfEncrypt"/>
        <argument name="eWriteMode" type="PoDoFo::EPdfWriteMode"/>
      </constructor>
      <method name="Close"/>
      <method name="GetWriteMode" const="true" return="PoDoFo::EPdfWriteMode"/>
      <method name="GetPdfVersion" const="true" return="PoDoFo::EPdfVersion"/>
      <method name="IsLinearized" const="true" return="bool"/>
      <method name="IsPrintAllowed" const="true" return="bool"/>
      <method name="IsEditAllowed" const="true" return="bool"/>
      <method name="IsCopyAllowed" const="true" return="bool"/>
      <method name="IsEditNotesAllowed" const="true" return="bool"/>
      <method name="IsFillAndSignAllowed" const="true" return="bool"/>
      <method name="IsAccessibilityAllowed" const="true" return="bool"/>
      <method name="IsDocAssemblyAllowed" const="true" return="bool"/>
      <method name="IsHighPrintAllowed" const="true" return="bool"/>
    </class>
    <class name="PdfTableModel" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfTableModel" implementation_class_header="PoDoFo/doc/PdfTableModel.h">
      <method name="GetText" const="true" return="PoDoFo::PdfString">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetAlignment" const="true" return="PoDoFo::EPdfAlignment">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>

      <method name="GetVerticalAlignment" const="true" return="PoDoFo::EPdfVerticalAlignment">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetFont" const="true" return="PoDoFo::PdfFont">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasBackgroundColor" const="true" return="bool">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetBackgroundColor" const="true" return="PoDoFo::PdfColor">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetForegroundColor" const="true" return="PoDoFo::PdfColor">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasWordWrap" const="true" return="bool">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasBorders" const="true" return="bool"/>
      <method name="GetBorderWidth" const="true" return="double"/>

      <method name="GetBorderColor" const="true" return="PoDoFo::PdfColor">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasImage" const="true" return="bool">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetImage" const="true" return="PoDoFo::PdfImage">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
    </class>
    <class name="PdfSimpleTableModel" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfSimpleTableModel" implementation_class_header="PoDoFo/doc/PdfTableModel.h" base="PoDoFo::PdfTableModel">
      <constructor name="Default" />
      <constructor name="FromSize" >
        <argument name="nCols" type="int"/>
        <argument name="nRows" type="int"/>
      </constructor>
      <method name="SetFont" >
        <argument name="pFont" type="PoDoFo::PdfFont"/>
      </method>
      <method name="SetAlignment" >
        <argument name="eAlignment" type="PoDoFo::EPdfAlignment"/>
      </method>
      <!-- Name Override
            <method name="SetAlignment" >
                <argument name="eAlignment" type="PoDoFo::EPdfVerticalAlignment"/>
            </method>
            -->
      <method name="SetBackgroundColor" >
        <argument name="rColor" type="PoDoFo::PdfColor"/>
      </method>

      <method name="SetForegroundColor" >
        <argument name="rColor" type="PoDoFo::PdfColor"/>
      </method>
      <method name="SetBackgroundEnabled" >
        <argument name="bEnable" type="bool"/>
      </method>
      <method name="SetWordWrapEnabled" >
        <argument name="bEnable" type="bool"/>
      </method>
      <method name="SetBorderEnabled" >
        <argument name="bEnable" type="bool"/>
      </method>
      <method name="SetBorderWidth" >
        <argument name="dWidth" type="double"/>
      </method>
      <method name="SetText" >
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
        <argument name="rsString" type="PoDoFo::PdfString"/>
      </method>
      <method name="GetText" const="true" return="PoDoFo::PdfString">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetAlignment" const="true" return="PoDoFo::EPdfAlignment">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>

      <method name="GetVerticalAlignment" const="true" return="PoDoFo::EPdfVerticalAlignment">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetFont" const="true" return="PoDoFo::PdfFont">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasBackgroundColor" const="true" return="bool">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetBackgroundColor" const="true" return="PoDoFo::PdfColor">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetForegroundColor" const="true" return="PoDoFo::PdfColor">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasWordWrap" const="true" return="bool">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasBorders" const="true" return="bool"/>
      <method name="GetBorderWidth" const="true" return="double"/>

      <method name="GetBorderColor" const="true" return="PoDoFo::PdfColor">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="HasImage" const="true" return="bool">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
      <method name="GetImage" const="true" return="PoDoFo::PdfImage">
        <argument name="col" type="int"/>
        <argument name="row" type="int"/>
      </method>
    </class>
    <class name="PdfTable" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfTable" implementation_class_header="PoDoFo/doc/PdfTableModel.h">
      <constructor name="FromSize">
        <argument name="nCols" type="int" />
        <argument name="nRows" type="int" />
      </constructor>
      <method name="Draw" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="pPainter" type="PoDoFo::PdfPainter"/>
        <argument name="rClipRect" type="PoDoFo::PdfRect"/>
        <argument name="pdLastX" type="double*"/>
        <argument name="pdLastY" type="double*"/>
      </method>
      <method name="GetWidth" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="pPage" type="PoDoFo::PdfCanvas"/>
      </method>
      <method name="GetHeight" >
        <argument name="dX" type="double"/>
        <argument name="dY" type="double"/>
        <argument name="pPage" type="PoDoFo::PdfCanvas"/>
      </method>
      <property name="Model" type="PoDoFo::PdfTableModel"/>
      <method name="SetColumnWidths" >
        <argument name="pdWidths" type="double*"/>
      </method>
      <method name="SetRowHeights" >
        <argument name="pdHeights" type="double*"/>
      </method>
      <method name="SetColumnWidth" >
        <argument name="dWidth" type="double"/>
      </method>
      <method name="SetRowHeight" >
        <argument name="dHeight" type="double"/>
      </method>
      <method name="SetTableWidth" >
        <argument name="dWidth" type="double"/>
      </method>
      <method name="SetTableHeight" >
        <argument name="dHeight" type="double"/>
      </method>
      <!-- Callback
            <method name="SetAutoPageBreak" >
                <argument name="bPageBreak" type="bool"/>
                <argument name="callback" type="PoDoFo::CreatePageCallback"/>
                <argument name="pCustomData" type="void*"/>
            </method>

            <method name="GetAutoPageBreak" return="bool" const="true"/>
            -->
      <method name="GetCols" return="int" const="true"/>
      <method name="GetRows" return="int" const="true"/>



    </class>
    <class name="PdfTilingPattern" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfTilingPattern" implementation_class_header="PoDoFo/doc/PdfTilingPattern.h" base="PdfElement">
      <method name="GetIdentifier" const="true" return="PoDoFo::PdfName"/>
      <constructor name="FromVecObjects">
        <argument name="eTilingType" type="EPdfTilingPatternType" />
        <argument name="strokeR" type="double" />
        <argument name="strokeG" type="double" />
        <argument name="strokeB" type="double" />
        <argument name="doFill" type="bool" />
        <argument name="fillR" type="double" />
        <argument name="fillG" type="double" />
        <argument name="fillB" type="double" />
        <argument name="offsetX" type="double" />
        <argument name="offsetY" type="double" />
        <argument name="pImage" type="PoDoFo::PdfImage" />
        <argument name="PdfVecObjects" type="PoDoFo::PdfVecObjects" />
      </constructor>
      <constructor name="FromDocument">
        <argument name="eTilingType" type="EPdfTilingPatternType" />
        <argument name="strokeR" type="double" />
        <argument name="strokeG" type="double" />
        <argument name="strokeB" type="double" />
        <argument name="doFill" type="bool" />
        <argument name="fillR" type="double" />
        <argument name="fillG" type="double" />
        <argument name="fillB" type="double" />
        <argument name="offsetX" type="double" />
        <argument name="offsetY" type="double" />
        <argument name="pImage" type="PoDoFo::PdfImage" />
        <argument name="PdfDocument" type="PoDoFo::pParent" />
      </constructor>
    </class>
    <namespace name="NonPublic" >
      <class name="PdfTTFWriter" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfTTFWriter" implementation_class_header="PoDoFo/doc/PdfTTFWriter.h">
        <constructor name="Default" />
        <constructor name="FromVector">
          <argument name="rvecGlyphs" type="const std::vector&lt;int&gt;&amp;"/>
        </constructor>
        <method name="Read" >
          <argument name="pDevice" type="PoDoFo::PdfInputDevice"/>
        </method>
        <method name="Subset"/>
        <method name="Write" >
          <argument name="pDevice" type="PoDoFo::PdfOutputDevice"/>
        </method>
      </class>
    </namespace>
    <class name="PdfXObject" lifecycle="copy_semantic" implementation_class_name="PoDoFo::PdfXObject" implementation_class_header="PoDoFo/doc/PdfXObject.h" base="PoDoFo::PdfCanvas">
      <constructor name="FromDocument">
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="pszPrefix" type="const char*"/>
        <argument name="bWithoutObjNum" type="bool"/>
      </constructor>
      <constructor name="FromVecObjects">
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfVecObjects"/>
        <argument name="pszPrefix" type="const char*"/>
      </constructor>
      <constructor name="FromMemDocument">
        <argument name="rRect" type="PoDoFo::PdfRect"/>
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="pszPrefix" type="const char*"/>
        <argument name="bWithoutObjNum" type="bool"/>
      </constructor>
      <constructor name="FromPage">
        <argument name="pParent" type="PoDoFo::PdfDocument"/>
        <argument name="nPage" type="int"/>
        <argument name="pszPrefix" type="const char*"/>
        <argument name="bWithoutObjNum" type="bool"/>
      </constructor>
      <constructor name="FromOther">
        <argument name="pObject" type="PoDoFo::PdfObject"/>
      </constructor>
      <method name="GetContents" const="true" return="PoDoFo::PdfObject"/>
      <method name="GetContentsForAppending" const="true" return="PoDoFo::PdfObject"/>
      <method name="GetResources" const="true" return="PoDoFo::PdfObject"/>
      <method name="GetPageSize" const="true" return="PoDoFo::PdfRect"/>
      <method name="GetIdentifier" const="true" return="PoDoFo::PdfName"/>
      <method name="GetObjectReference" const="true" return="PoDoFo::PdfReference"/>
    </class>
  </namespace>
</PoDoFo:api>
